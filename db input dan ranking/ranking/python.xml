<?xml version="1.0" encoding="Windows-1252" ?>
	<!--
	@author Gregori Gerebtzoff
	@version 1.2
	-->
<NotepadPlus>
	<AutoComplete>
		<Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," additionalWordChar = "." />
		<KeyWord name="ArithmeticError" func="yes">
			<Overload retVal="" descr="Base class for arithmetic errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="AssertionError" func="yes">
			<Overload retVal="" descr="Assertion failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="AttributeError" func="yes">
			<Overload retVal="" descr="Attribute not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="BaseException" func="yes">
			<Overload retVal="" descr="Common base class for all exceptions">
			</Overload>
		</KeyWord>
		<KeyWord name="Binary" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="Book" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="BufferError" func="yes">
			<Overload retVal="" descr="Buffer error.">
			</Overload>
		</KeyWord>
		<KeyWord name="BytesWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about bytes and buffer related problems, mostly&#10;related to conversion from str or comparing to str.">
			</Overload>
		</KeyWord>
		<KeyWord name="Connect" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="Connection" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="DBAPISet" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.DBAPISet">
			</Overload>
		</KeyWord>
		<KeyWord name="Date" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Date">
			</Overload>
		</KeyWord>
		<KeyWord name="DateFromTicks" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="DeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about deprecated features.">
			</Overload>
		</KeyWord>
		<KeyWord name="EOFError" func="yes">
			<Overload retVal="" descr="Read beyond end of file.">
			</Overload>
		</KeyWord>
		<KeyWord name="EnvironmentError" func="yes">
			<Overload retVal="" descr="Base class for I/O related errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="Exception" func="yes">
			<Overload retVal="" descr="Common base class for all non-exit exceptions.">
			</Overload>
		</KeyWord>
		<KeyWord name="False" />
		<KeyWord name="FloatingPointError" func="yes">
			<Overload retVal="" descr="Floating point operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="FutureWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about constructs that will change semantically&#10;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="GeneratorExit" func="yes">
			<Overload retVal="" descr="Request that a generator exit.">
			</Overload>
		</KeyWord>
		<KeyWord name="IOError" func="yes">
			<Overload retVal="" descr="I/O operation failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportError" func="yes">
			<Overload retVal="" descr="Import can't find module, or can't find name in module.">
			</Overload>
		</KeyWord>
		<KeyWord name="ImportWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about probable mistakes in module imports">
			</Overload>
		</KeyWord>
		<KeyWord name="IndentationError" func="yes">
			<Overload retVal="" descr="Improper indentation.">
			</Overload>
		</KeyWord>
		<KeyWord name="IndexError" func="yes">
			<Overload retVal="" descr="Sequence index out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyError" func="yes">
			<Overload retVal="" descr="Mapping key not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="KeyboardInterrupt" func="yes">
			<Overload retVal="" descr="Program interrupted by user.">
			</Overload>
		</KeyWord>
		<KeyWord name="LookupError" func="yes">
			<Overload retVal="" descr="Base class for lookup errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="MemoryError" func="yes">
			<Overload retVal="" descr="Out of memory.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb" func="yes">
			<Overload retVal="" descr="MySQLdb - A DB API v2.0 compatible interface to MySQL.&#10;&#10;This package is a wrapper around _mysql, which mostly implements the&#10;MySQL C API.&#10;&#10;connect() -- connects to server&#10;&#10;See the C API specification and the MySQL documentation for more info&#10;on other items.&#10;&#10;For information on how MySQLdb handles type conversion, see the&#10;MySQLdb.converters module.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.BINARY" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Binary" />
		<KeyWord name="MySQLdb.Connect" func="yes">
			<Overload retVal="" descr="Factory function for connections.Connection.">
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Connection" func="yes">
			<Overload retVal="" descr="Factory function for connections.Connection.">
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DATE" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DATETIME" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet" func="yes">
			<Overload retVal="" descr="A special type of set for which A == x is true if A is a&#10;DBAPISet and x is a member of that set.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.copy" func="yes">
			<Overload retVal="" descr="Return a shallow copy of a set.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.difference" func="yes">
			<Overload retVal="" descr="Return the difference of two or more sets as a new set.&#10;&#10;(i.e. all elements that are in this set but not the others.)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.intersection" func="yes">
			<Overload retVal="" descr="Return the intersection of two or more sets as a new set.&#10;&#10;(i.e. elements that are common to all of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.isdisjoint" func="yes">
			<Overload retVal="" descr="Return True if two sets have a null intersection.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.issubset" func="yes">
			<Overload retVal="" descr="Report whether another set contains this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.issuperset" func="yes">
			<Overload retVal="" descr="Report whether this set contains another set.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.symmetric_difference" func="yes">
			<Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#10;&#10;(i.e. all elements that are in exactly one of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DBAPISet.union" func="yes">
			<Overload retVal="" descr="Return the union of sets as a new set.&#10;&#10;(i.e. all elements that are in either set.)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DataError" func="yes">
			<Overload retVal="" descr="Exception raised for errors that are due to problems with the&#10;processed data like division by zero, numeric value out of range,&#10;etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DataError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DataError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DatabaseError" func="yes">
			<Overload retVal="" descr="Exception raised for errors that are related to the&#10;database.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DatabaseError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DatabaseError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date" func="yes">
			<Overload retVal="" descr="date(year, month, day) --&gt; date object">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.ctime" func="yes">
			<Overload retVal="" descr="Return ctime() style string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.day" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.fromordinal" func="yes">
			<Overload retVal="" descr="int -&gt; date corresponding to a proleptic Gregorian ordinal.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.fromtimestamp" func="yes">
			<Overload retVal="" descr="timestamp -&gt; local date from a POSIX timestamp (like time.time()).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.isocalendar" func="yes">
			<Overload retVal="" descr="Return a 3-tuple containing ISO year, week number, and weekday.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.isoformat" func="yes">
			<Overload retVal="" descr="Return string in ISO 8601 format, YYYY-MM-DD.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.isoweekday" func="yes">
			<Overload retVal="" descr="Return the day of the week represented by the date.&#10;Monday == 1 ... Sunday == 7">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.max" func="yes">
			<Overload retVal="" descr="(date)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.min" func="yes">
			<Overload retVal="" descr="(date)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.month" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.replace" func="yes">
			<Overload retVal="" descr="Return date with new specified fields.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.resolution" func="yes">
			<Overload retVal="" descr="(timedelta)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.strftime" func="yes">
			<Overload retVal="" descr="format -&gt; strftime() style string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.timetuple" func="yes">
			<Overload retVal="" descr="Return time tuple, compatible with time.localtime().">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.today" func="yes">
			<Overload retVal="" descr="Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.toordinal" func="yes">
			<Overload retVal="" descr="Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.weekday" func="yes">
			<Overload retVal="" descr="Return the day of the week represented by the date.&#10;Monday == 0 ... Sunday == 6">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Date.year" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.DateFromTicks" func="yes">
			<Overload retVal="" descr="Convert UNIX ticks into a date instance.">
				<Param name="ticks" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Error" func="yes">
			<Overload retVal="" descr="Exception that is the base class of all other error exceptions&#10;(not Warning).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.IntegrityError" func="yes">
			<Overload retVal="" descr="Exception raised when the relational integrity of the database&#10;is affected, e.g. a foreign key check fails, duplicate key,&#10;etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.IntegrityError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.IntegrityError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InterfaceError" func="yes">
			<Overload retVal="" descr="Exception raised for errors that are related to the database&#10;interface rather than the database itself.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InterfaceError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InterfaceError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InternalError" func="yes">
			<Overload retVal="" descr="Exception raised when the database encounters an internal&#10;error, e.g. the cursor is not valid anymore, the transaction is&#10;out of sync, etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InternalError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.InternalError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.MySQLError" func="yes">
			<Overload retVal="" descr="Exception related to operation with MySQL.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.MySQLError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.MySQLError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.NULL" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.NUMBER" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.NotSupportedError" func="yes">
			<Overload retVal="" descr="Exception raised in case a method or database API was used&#10;which is not supported by the database, e.g. requesting a&#10;.rollback() on a connection that does not support transaction or&#10;has transactions turned off.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.NotSupportedError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.NotSupportedError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.OperationalError" func="yes">
			<Overload retVal="" descr="Exception raised for errors that are related to the database's&#10;operation and not necessarily under the control of the programmer,&#10;e.g. an unexpected disconnect occurs, the data source name is not&#10;found, a transaction could not be processed, a memory allocation&#10;error occurred during processing, etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.OperationalError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.OperationalError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.ProgrammingError" func="yes">
			<Overload retVal="" descr="Exception raised for programming errors, e.g. table not found&#10;or already exists, syntax error in the SQL statement, wrong number&#10;of parameters specified, etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.ProgrammingError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.ProgrammingError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.STRING" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.TIME" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.TIMESTAMP" func="yes">
			<Overload retVal="" descr="(DBAPISet)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time" func="yes">
			<Overload retVal="" descr="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object&#10;&#10;All arguments are optional. tzinfo may be None, or an instance of&#10;a tzinfo subclass. The remaining arguments may be ints or longs.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.dst" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.dst(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.hour" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.isoformat" func="yes">
			<Overload retVal="" descr="Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM].">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.max" func="yes">
			<Overload retVal="" descr="(time)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.microsecond" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.minute" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.replace" func="yes">
			<Overload retVal="" descr="Return time with new specified fields.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.resolution" func="yes">
			<Overload retVal="" descr="(timedelta)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.second" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.strftime" func="yes">
			<Overload retVal="" descr="format -&gt; strftime() style string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.tzinfo" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.tzname" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.tzname(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Time.utcoffset" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.utcoffset(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.TimeFromTicks" func="yes">
			<Overload retVal="" descr="Convert UNIX ticks into a time instance.">
				<Param name="ticks" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp" func="yes">
			<Overload retVal="" descr="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;&#10;The year, month and day arguments are required. tzinfo may be None, or an&#10;instance of a tzinfo subclass. The remaining arguments may be ints or longs.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.astimezone" func="yes">
			<Overload retVal="" descr="tz -&gt; convert to local time in new timezone tz">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.combine" func="yes">
			<Overload retVal="" descr="date, time -&gt; datetime with same date and time fields">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.ctime" func="yes">
			<Overload retVal="" descr="Return ctime() style string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.date" func="yes">
			<Overload retVal="" descr="Return date object with same year, month and day.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.day" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.dst" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.dst(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.fromordinal" func="yes">
			<Overload retVal="" descr="int -&gt; date corresponding to a proleptic Gregorian ordinal.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.fromtimestamp" func="yes">
			<Overload retVal="" descr="timestamp[, tz] -&gt; tz's local time from POSIX timestamp.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.hour" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.isocalendar" func="yes">
			<Overload retVal="" descr="Return a 3-tuple containing ISO year, week number, and weekday.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.isoformat" func="yes">
			<Overload retVal="" descr="[sep] -&gt; string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].&#10;&#10;sep is used to separate the year from the time, and defaults to 'T'.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.isoweekday" func="yes">
			<Overload retVal="" descr="Return the day of the week represented by the date.&#10;Monday == 1 ... Sunday == 7">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.max" func="yes">
			<Overload retVal="" descr="(datetime)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.microsecond" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.min" func="yes">
			<Overload retVal="" descr="(datetime)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.minute" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.month" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.now" func="yes">
			<Overload retVal="" descr="[tz] -&gt; new datetime with tz's local day and time.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.replace" func="yes">
			<Overload retVal="" descr="Return datetime with new specified fields.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.resolution" func="yes">
			<Overload retVal="" descr="(timedelta)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.second" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.strftime" func="yes">
			<Overload retVal="" descr="format -&gt; strftime() style string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.strptime" func="yes">
			<Overload retVal="" descr="string, format -&gt; new datetime parsed from a string (like time.strptime()).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.time" func="yes">
			<Overload retVal="" descr="Return time object with same time but with tzinfo=None.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.timetuple" func="yes">
			<Overload retVal="" descr="Return time tuple, compatible with time.localtime().">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.timetz" func="yes">
			<Overload retVal="" descr="Return time object with same time and tzinfo.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.today" func="yes">
			<Overload retVal="" descr="Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.toordinal" func="yes">
			<Overload retVal="" descr="Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.tzinfo" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.tzname" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.tzname(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.utcfromtimestamp" func="yes">
			<Overload retVal="" descr="timestamp -&gt; UTC datetime from a POSIX timestamp (like time.time()).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.utcnow" func="yes">
			<Overload retVal="" descr="Return a new datetime representing UTC day and time.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.utcoffset" func="yes">
			<Overload retVal="" descr="Return self.tzinfo.utcoffset(self).">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.utctimetuple" func="yes">
			<Overload retVal="" descr="Return UTC time tuple, compatible with time.localtime().">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.weekday" func="yes">
			<Overload retVal="" descr="Return the day of the week represented by the date.&#10;Monday == 0 ... Sunday == 6">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Timestamp.year" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.TimestampFromTicks" func="yes">
			<Overload retVal="" descr="Convert UNIX ticks into a datetime instance.">
				<Param name="ticks" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Warning" func="yes">
			<Overload retVal="" descr="Exception raised for important warnings like data truncations&#10;while inserting, etc.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Warning.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.Warning.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.apilevel" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connect" func="yes">
			<Overload retVal="" descr="Factory function for connections.Connection.">
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection" func="yes">
			<Overload retVal="" descr="Returns a MYSQL connection object. Exclusive use of&#10;keyword parameters strongly recommended. Consult the&#10;MySQL C API documentation for more details.&#10;&#10;host&#10;  string, host to connect&#10;&#10;user&#10;  string, user to connect as&#10;&#10;passwd&#10;  string, password to use&#10;&#10;db&#10;  string, database to use&#10;&#10;port&#10;  integer, TCP/IP port to connect to&#10;&#10;unix_socket&#10;  string, location of unix_socket (UNIX-ish only)&#10;&#10;conv&#10;  mapping, maps MySQL FIELD_TYPE.* to Python functions which&#10;  convert a string to the appropriate Python type&#10;&#10;connect_timeout&#10;  number of seconds to wait before the connection&#10;  attempt fails.&#10;&#10;compress&#10;  if set, gzip compression is enabled&#10;&#10;named_pipe&#10;  if set, connect to server via named pipe (Windows only)&#10;&#10;init_command&#10;  command which is run once the connection is created&#10;&#10;read_default_file&#10;  see the MySQL documentation for mysql_options()&#10;&#10;read_default_group&#10;  see the MySQL documentation for mysql_options()&#10;&#10;client_flag&#10;  client flags from MySQLdb.constants.CLIENT&#10;&#10;load_infile&#10;  int, non-zero enables LOAD LOCAL INFILE, zero disables">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.affected_rows" func="yes">
			<Overload retVal="" descr="Return number of rows affected by the last query.&#10;Non-standard. Use Cursor.rowcount.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.autocommit" func="yes">
			<Overload retVal="" descr="Set the autocommit mode. True values enable; False value disable.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.change_user" func="yes">
			<Overload retVal="" descr="Changes the user and causes the database specified by db to&#10;become the default (current) database on the connection&#10;specified by mysql. In subsequent queries, this database is&#10;the default for table references that do not include an&#10;explicit database specifier.&#10;&#10;This function was introduced in MySQL Version 3.23.3.&#10;&#10;Fails unless the connected user can be authenticated or if he&#10;doesn't have permission to use the database. In this case the&#10;user and database are not changed.&#10;&#10;The db parameter may be set to None if you don't want to have&#10;a default database.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.character_set_name" func="yes">
			<Overload retVal="" descr="Returns the default character set for the current connection.&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.client_flag" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.close" func="yes">
			<Overload retVal="" descr="Close the connection. No further activity possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.commit" func="yes">
			<Overload retVal="" descr="Commits the current transaction">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.converter" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.dump_debug_info" func="yes">
			<Overload retVal="" descr="Instructs the server to write some debug information to the&#10;log. The connected user must have the process privilege for&#10;this to work. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.errno" func="yes">
			<Overload retVal="" descr="Returns the error code for the most recently invoked API function&#10;that can succeed or fail. A return value of zero means that no error&#10;occurred.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.error" func="yes">
			<Overload retVal="" descr="Returns the error message for the most recently invoked API function&#10;that can succeed or fail. An empty string () is returned if no error&#10;occurred.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.escape" func="yes">
			<Overload retVal="" descr="escape(obj, dict) -- escape any special characters in object obj&#10;using mapping dict to provide quoting functions for each type.&#10;Returns a SQL literal string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.escape_string" func="yes">
			<Overload retVal="" descr="escape_string(s) -- quote any SQL-interpreted characters in string s.&#10;&#10;Use connection.escape_string(s), if you use it at all.&#10;_mysql.escape_string(s) cannot handle character sets. You are&#10;probably better off using connection.escape(o) instead, since&#10;it will escape entire sequences as well as strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.field_count" func="yes">
			<Overload retVal="" descr="Returns the number of columns for the most recent query on the&#10;connection. Non-standard. Will probably give you bogus results&#10;on most cursor classes. Use Cursor.rowcount.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.get_autocommit" func="yes">
			<Overload retVal="" descr="Get the autocommit mode. True when enable; False when disable.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.get_character_set_info" func="yes">
			<Overload retVal="" descr="Returns a dict with information about the current character set:&#10;&#10;collation&#10;    collation name&#10;name&#10;    character set name&#10;comment&#10;    comment or descriptive name&#10;dir&#10;    character set directory&#10;mbminlen&#10;    min. length for multibyte string&#10;mbmaxlen&#10;    max. length for multibyte string&#10;&#10;Not all keys may be present, particularly dir.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.get_host_info" func="yes">
			<Overload retVal="" descr="Returns a string that represents the MySQL client library&#10;version. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.get_proto_info" func="yes">
			<Overload retVal="" descr="Returns an unsigned integer representing the protocol version&#10;used by the current connection. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.get_server_info" func="yes">
			<Overload retVal="" descr="Returns a string that represents the server version number.&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.info" func="yes">
			<Overload retVal="" descr="Retrieves a string providing information about the most&#10;recently executed query. Non-standard. Use messages or&#10;Cursor.messages.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.insert_id" func="yes">
			<Overload retVal="" descr="Returns the ID generated for an AUTO_INCREMENT column by the previous&#10;query. Use this function after you have performed an INSERT query into a&#10;table that contains an AUTO_INCREMENT field.&#10;&#10;Note that this returns 0 if the previous query does not&#10;generate an AUTO_INCREMENT value. If you need to save the value for&#10;later, be sure to call this immediately after the query&#10;that generates the value.&#10;&#10;The ID is updated after INSERT and UPDATE statements that generate&#10;an AUTO_INCREMENT value or that set a column value to&#10;LAST_INSERT_ID(expr). See section 6.3.5.2 Miscellaneous Functions&#10;in the MySQL documentation.&#10;&#10;Also note that the value of the SQL LAST_INSERT_ID() function always&#10;contains the most recently generated AUTO_INCREMENT value, and is not&#10;reset between queries because the value of that function is maintained&#10;in the server.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.kill" func="yes">
			<Overload retVal="" descr="Asks the server to kill the thread specified by pid.&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.next_result" func="yes">
			<Overload retVal="" descr="If more query results exist, next_result() reads the next query&#10;results and returns the status back to application.&#10;&#10;After calling next_result() the state of the connection is as if&#10;you had called query() for the next query. This means that you can&#10;now call store_result(), warning_count(), affected_rows()&#10;, and so forth. &#10;&#10;Returns 0 if there are more results; -1 if there are no more results&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.open" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.ping" func="yes">
			<Overload retVal="" descr="Checks whether or not the connection to the server is&#10;working. If it has gone down, an automatic reconnection is&#10;attempted.&#10;&#10;This function can be used by clients that remain idle for a&#10;long while, to check whether or not the server has closed the&#10;connection and reconnect if necessary.&#10;&#10;New in 1.2.2: Accepts an optional reconnect parameter. If True,&#10;then the client will attempt reconnection. Note that this setting&#10;is persistent. By default, this is on in MySQL&lt;5.0.3, and off&#10;thereafter.&#10;&#10;Non-standard. You should assume that ping() performs an&#10;implicit rollback; use only when starting a new transaction.&#10;You have been warned.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.port" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.query" func="yes">
			<Overload retVal="" descr="Execute a query. store_result() or use_result() will get the&#10;result set, if any. Non-standard. Use cursor() to create a cursor,&#10;then cursor.execute().">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.rollback" func="yes">
			<Overload retVal="" descr="Rolls backs the current transaction">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.select_db" func="yes">
			<Overload retVal="" descr="Causes the database specified by db to become the default&#10;(current) database on the connection specified by mysql. In subsequent&#10;queries, this database is the default for table references that do not&#10;include an explicit database specifier.&#10;&#10;Fails unless the connected user can be authenticated as having&#10;permission to use the database.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.server_capabilities" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.set_character_set" func="yes">
			<Overload retVal="" descr="Sets the default character set for the current connection.&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.set_server_option" func="yes">
			<Overload retVal="" descr="set_server_option(option) -- Enables or disables an option&#10;for the connection.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.shutdown" func="yes">
			<Overload retVal="" descr="Asks the database server to shut down. The connected user must&#10;have shutdown privileges. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.sqlstate" func="yes">
			<Overload retVal="" descr="Returns a string containing the SQLSTATE error code&#10;for the last error. The error code consists of five characters.&#10;'00000' means &quot;no error.&quot; The values are specified by ANSI SQL&#10;and ODBC. For a list of possible values, see section 23&#10;Error Handling in MySQL in the MySQL Manual.&#10;&#10;Note that not all MySQL errors are yet mapped to SQLSTATE's.&#10;The value 'HY000' (general error) is used for unmapped errors.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.stat" func="yes">
			<Overload retVal="" descr="Returns a character string containing information similar to&#10;that provided by the mysqladmin status command. This includes&#10;uptime in seconds and the number of running threads,&#10;questions, reloads, and open tables. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.store_result" func="yes">
			<Overload retVal="" descr="Returns a result object acquired by mysql_store_result&#10;(results stored in the client). If no results are available,&#10;None is returned. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.string_literal" func="yes">
			<Overload retVal="" descr="string_literal(obj) -- converts object obj into a SQL string literal.&#10;This means, any special SQL characters are escaped, and it is enclosed&#10;within single quotes. In other words, it performs:&#10;&#10;&quot;'%s'&quot; % escape_string(str(obj))&#10;&#10;Use connection.string_literal(obj), if you use it at all.&#10;_mysql.string_literal(obj) cannot handle character sets.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.thread_id" func="yes">
			<Overload retVal="" descr="Returns the thread ID of the current connection. This value&#10;can be used as an argument to kill() to kill the thread.&#10;&#10;If the connection is lost and you reconnect with ping(), the&#10;thread ID will change. This means you should not get the&#10;thread ID and store it for later. You should get it when you&#10;need it.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.use_result" func="yes">
			<Overload retVal="" descr="Returns a result object acquired by mysql_use_result&#10;(results stored in the server). If no results are available,&#10;None is returned. Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.connection.warning_count" func="yes">
			<Overload retVal="" descr="Returns the number of warnings generated during execution&#10;of the previous SQL statement.&#10;&#10;Non-standard.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.debug" func="yes">
			<Overload retVal="" descr="Does a DBUG_PUSH with the given string.&#10;mysql_debug() uses the Fred Fish debug library.&#10;To use this function, you must compile the client library to&#10;support debugging.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.escape" func="yes">
			<Overload retVal="" descr="escape(obj, dict) -- escape any special characters in object obj&#10;using mapping dict to provide quoting functions for each type.&#10;Returns a SQL literal string.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.escape_dict" func="yes">
			<Overload retVal="" descr="escape_sequence(d, dict) -- escape any special characters in&#10;dictionary d using mapping dict to provide quoting functions for each type.&#10;Returns a dictionary of escaped items.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.escape_sequence" func="yes">
			<Overload retVal="" descr="escape_sequence(seq, dict) -- escape any special characters in sequence&#10;seq using mapping dict to provide quoting functions for each type.&#10;Returns a tuple of escaped items.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.escape_string" func="yes">
			<Overload retVal="" descr="escape_string(s) -- quote any SQL-interpreted characters in string s.&#10;&#10;Use connection.escape_string(s), if you use it at all.&#10;_mysql.escape_string(s) cannot handle character sets. You are&#10;probably better off using connection.escape(o) instead, since&#10;it will escape entire sequences as well as strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.get_client_info" func="yes">
			<Overload retVal="" descr="get_client_info() -- Returns a string that represents&#10;the client library version.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.paramstyle" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result" func="yes">
			<Overload retVal="" descr="result(connection, use=0, converter={}) -- Result set from a query.&#10;&#10;Creating instances of this class directly is an excellent way to&#10;shoot yourself in the foot. If using _mysql.connection directly,&#10;use connection.store_result() or connection.use_result() instead.&#10;If using MySQLdb.Connection, this is done by the cursor class.&#10;Just forget you ever saw this. Forget... FOR-GET...">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.converter" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.data_seek" func="yes">
			<Overload retVal="" descr="data_seek(n) -- seek to row n of result set">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.describe" func="yes">
			<Overload retVal="" descr="Returns the sequence of 7-tuples required by the DB-API for&#10;the Cursor.description attribute.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.fetch_row" func="yes">
			<Overload retVal="" descr="fetch_row([maxrows, how]) -- Fetches up to maxrows as a tuple.&#10;The rows are formatted according to how:&#10;&#10;    0 -- tuples (default)&#10;    1 -- dictionaries, key=column or table.column if duplicated&#10;    2 -- dictionaries, key=table.column">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.field_flags" func="yes">
			<Overload retVal="" descr="Returns a tuple of field flags, one for each column in the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.num_fields" func="yes">
			<Overload retVal="" descr="Returns the number of fields (column) in the result.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.num_rows" func="yes">
			<Overload retVal="" descr="Returns the number of rows in the result set. Note that if&#10;use=1, this will not return a valid value until the entire result&#10;set has been read.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.row_seek" func="yes">
			<Overload retVal="" descr="row_seek(n) -- seek by offset n rows of result set">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.result.row_tell" func="yes">
			<Overload retVal="" descr="row_tell() -- return the current row number of the result set.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.server_end" func="yes">
			<Overload retVal="" descr="Shut down embedded server. If not using an embedded server, this&#10;does nothing.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.server_init" func="yes">
			<Overload retVal="" descr="Initialize embedded server. If this client is not linked against&#10;the embedded server library, this function does nothing.&#10;&#10;args -- sequence of command-line arguments&#10;groups -- sequence of groups to use in defaults files">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.string_literal" func="yes">
			<Overload retVal="" descr="string_literal(obj) -- converts object obj into a SQL string literal.&#10;This means, any special SQL characters are escaped, and it is enclosed&#10;within single quotes. In other words, it performs:&#10;&#10;&quot;'%s'&quot; % escape_string(str(obj))&#10;&#10;Use connection.string_literal(obj), if you use it at all.&#10;_mysql.string_literal(obj) cannot handle character sets.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.test_DBAPISet_set_equality" />
		<KeyWord name="MySQLdb.test_DBAPISet_set_equality_membership" />
		<KeyWord name="MySQLdb.test_DBAPISet_set_inequality" />
		<KeyWord name="MySQLdb.test_DBAPISet_set_inequality_membership" />
		<KeyWord name="MySQLdb.thread_safe" func="yes">
			<Overload retVal="" descr="Indicates whether the client is compiled as thread-safe.">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.threadsafety" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="MySQLdb.version_info" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="NameError" func="yes">
			<Overload retVal="" descr="Name not found globally.">
			</Overload>
		</KeyWord>
		<KeyWord name="None" />
		<KeyWord name="NotImplementedError" func="yes">
			<Overload retVal="" descr="Method or function hasn't been implemented yet.">
			</Overload>
		</KeyWord>
		<KeyWord name="OSError" func="yes">
			<Overload retVal="" descr="OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="OverflowError" func="yes">
			<Overload retVal="" descr="Result too large to be represented.">
			</Overload>
		</KeyWord>
		<KeyWord name="PendingDeprecationWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about features which will be deprecated&#10;in the future.">
			</Overload>
		</KeyWord>
		<KeyWord name="ReferenceError" func="yes">
			<Overload retVal="" descr="Weak ref proxy used after referent went away.">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeError" func="yes">
			<Overload retVal="" descr="Unspecified run-time error.">
			</Overload>
		</KeyWord>
		<KeyWord name="RuntimeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious runtime behavior.">
			</Overload>
		</KeyWord>
		<KeyWord name="StandardError" func="yes">
			<Overload retVal="" descr="Base class for all standard Python exceptions that do not represent&#10;interpreter exiting.">
			</Overload>
		</KeyWord>
		<KeyWord name="StopIteration" func="yes">
			<Overload retVal="" descr="Signal the end from iterator.next().">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxError" func="yes">
			<Overload retVal="" descr="Invalid syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SyntaxWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about dubious syntax.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemError" func="yes">
			<Overload retVal="" descr="Internal error in the Python interpreter.&#10;&#10;Please report this to the Python maintainer, along with the traceback,&#10;the Python version, and the hardware/OS platform and version.">
			</Overload>
		</KeyWord>
		<KeyWord name="SystemExit" func="yes">
			<Overload retVal="" descr="Request to exit from the interpreter.">
			</Overload>
		</KeyWord>
		<KeyWord name="TabError" func="yes">
			<Overload retVal="" descr="Improper mixture of spaces and tabs.">
			</Overload>
		</KeyWord>
		<KeyWord name="Time" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Time">
			</Overload>
		</KeyWord>
		<KeyWord name="TimeFromTicks" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="Timestamp" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="TimestampFromTicks" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="True" />
		<KeyWord name="TypeError" func="yes">
			<Overload retVal="" descr="Inappropriate argument type.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnboundLocalError" func="yes">
			<Overload retVal="" descr="Local name referenced but not bound to a value.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeDecodeError" func="yes">
			<Overload retVal="" descr="Unicode decoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeEncodeError" func="yes">
			<Overload retVal="" descr="Unicode encoding error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeError" func="yes">
			<Overload retVal="" descr="Unicode related error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeTranslateError" func="yes">
			<Overload retVal="" descr="Unicode translation error.">
			</Overload>
		</KeyWord>
		<KeyWord name="UnicodeWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings about Unicode related problems, mostly&#10;related to conversion problems.">
			</Overload>
		</KeyWord>
		<KeyWord name="UserWarning" func="yes">
			<Overload retVal="" descr="Base class for warnings generated by user code.">
			</Overload>
		</KeyWord>
		<KeyWord name="ValueError" func="yes">
			<Overload retVal="" descr="Inappropriate argument value (of correct type).">
			</Overload>
		</KeyWord>
		<KeyWord name="Warning" func="yes">
			<Overload retVal="" descr="Base class for warning categories.">
			</Overload>
		</KeyWord>
		<KeyWord name="WindowsError" func="yes">
			<Overload retVal="" descr="MS-Windows OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="Workbook" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="ZeroDivisionError" func="yes">
			<Overload retVal="" descr="Second argument to a division or modulo operation was zero.">
			</Overload>
		</KeyWord>
		<KeyWord name="abort" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="abs" func="yes">
			<Overload retVal="" descr="abs(number) -&gt; number&#10;&#10;Return the absolute value of the argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="access" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="add" func="yes">
			<Overload retVal="" descr="Add an element to a set.&#10;&#10;This has no effect if the element is already present.">
			</Overload>
		</KeyWord>
		<KeyWord name="add_named_range" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="add_sheet" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="affected_rows" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="all" func="yes">
			<Overload retVal="" descr="all(iterable) -&gt; bool&#10;&#10;Return True if bool(x) is True for all values x in the iterable.&#10;If the iterable is empty, return True.">
			</Overload>
		</KeyWord>
		<KeyWord name="and" />
		<KeyWord name="any" func="yes">
			<Overload retVal="" descr="any(iterable) -&gt; bool&#10;&#10;Return True if bool(x) is True for any x in the iterable.&#10;If the iterable is empty, return False.">
			</Overload>
		</KeyWord>
		<KeyWord name="append" func="yes">
			<Overload retVal="" descr="B.append(int) -&gt; None&#10;&#10;Append a single item to the end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="apply" func="yes">
			<Overload retVal="" descr="apply(object[, args[, kwargs]]) -&gt; value&#10;&#10;Call a callable object with positional arguments taken from the tuple args,&#10;and keyword arguments taken from the optional dictionary kwargs.&#10;Note that classes are callable, as are instances with a __call__() method.&#10;&#10;Deprecated since release 2.3. Instead, use the extended call syntax:&#10;    function(*args, **keywords).">
			</Overload>
		</KeyWord>
		<KeyWord name="as" />
		<KeyWord name="as_integer_ratio" func="yes">
			<Overload retVal="" descr="float.as_integer_ratio() -&gt; (int, int)&#10;&#10;Return a pair of integers, whose ratio is exactly equal to the original&#10;float and with a positive denominator.&#10;Raise OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
			</Overload>
		</KeyWord>
		<KeyWord name="asctime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="assert" />
		<KeyWord name="astimezone" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="autocommit" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="basestring" func="yes">
			<Overload retVal="" descr="Type basestring cannot be instantiated; it is the base for str and unicode.">
			</Overload>
		</KeyWord>
		<KeyWord name="biff2_8_load" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="bin" func="yes">
			<Overload retVal="" descr="bin(number) -&gt; string&#10;&#10;Return the binary representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="bit_length" func="yes">
			<Overload retVal="" descr="long.bit_length() -&gt; int or long&#10;&#10;Number of bits necessary to represent self in binary.&#10;&gt;&gt;&gt; bin(37L)&#10;'0b100101'&#10;&gt;&gt;&gt; (37L).bit_length()&#10;6">
			</Overload>
		</KeyWord>
		<KeyWord name="bool" func="yes">
			<Overload retVal="" descr="bool(x) -&gt; bool&#10;&#10;Returns True when the argument x is true, False otherwise.&#10;The builtins True and False are the only two instances of the class bool.&#10;The class bool is a subclass of the class int, and cannot be subclassed.">
			</Overload>
		</KeyWord>
		<KeyWord name="break" />
		<KeyWord name="buffer" func="yes">
			<Overload retVal="" descr="buffer(object [, offset[, size]])&#10;&#10;Create a new buffer object which references the given object.&#10;The buffer will reference a slice of the target object from the&#10;start of the object (or at the specified offset). The slice will&#10;extend to the end of the target object (or with the specified size).">
			</Overload>
		</KeyWord>
		<KeyWord name="bytearray" func="yes">
			<Overload retVal="" descr="bytearray(iterable_of_ints) -&gt; bytearray.&#10;bytearray(string, encoding[, errors]) -&gt; bytearray.&#10;bytearray(bytes_or_bytearray) -&gt; mutable copy of bytes_or_bytearray.&#10;bytearray(memory_view) -&gt; bytearray.&#10;&#10;Construct an mutable bytearray object from:&#10;  - an iterable yielding integers in range(256)&#10;  - a text string encoded using the specified encoding&#10;  - a bytes or a bytearray object&#10;  - any object implementing the buffer API.&#10;&#10;bytearray(int) -&gt; bytearray.&#10;&#10;Construct a zero-initialized bytearray of the given length.">
			</Overload>
		</KeyWord>
		<KeyWord name="bytes" func="yes">
			<Overload retVal="" descr="str(object='') -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="call_tracing" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="callable" func="yes">
			<Overload retVal="" descr="callable(object) -&gt; bool&#10;&#10;Return whether the object is callable (i.e., some kind of function).&#10;Note that classes are callable, as are instances with a __call__() method.">
			</Overload>
		</KeyWord>
		<KeyWord name="callstats" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="capitalize" func="yes">
			<Overload retVal="" descr="S.capitalize() -&gt; string&#10;&#10;Return a copy of the string S with only its first character&#10;capitalized.">
			</Overload>
		</KeyWord>
		<KeyWord name="cellname" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="cellnameabs" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="center" func="yes">
			<Overload retVal="" descr="B.center(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B centered in a string of length width.  Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="change_user" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="character_set_name" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="chdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="chmod" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="chr" func="yes">
			<Overload retVal="" descr="chr(i) -&gt; character&#10;&#10;Return a string of one character with ordinal i; 0 &lt;= i &lt; 256.">
			</Overload>
		</KeyWord>
		<KeyWord name="class" />
		<KeyWord name="classmethod" func="yes">
			<Overload retVal="" descr="classmethod(function) -&gt; method&#10;&#10;Convert a function to be a class method.&#10;&#10;A class method receives the class as implicit first argument,&#10;just like an instance method receives the instance.&#10;To declare a class method, use this idiom:&#10;&#10;  class C:&#10;      def f(cls, arg1, arg2, ...): ...&#10;      f = classmethod(f)&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;If a class method is called for a derived class, the derived class&#10;object is passed as the implied first argument.&#10;&#10;Class methods are different than C++ or Java static methods.&#10;If you want those, see the staticmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="clear" func="yes">
			<Overload retVal="" descr="Remove all elements from this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="clock" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="close" func="yes">
			<Overload retVal="" descr="close() -&gt; None or (perhaps) an integer.  Close the file.&#10;&#10;Sets data attribute .closed to True.  A closed file cannot be used for&#10;further I/O operations.  close() may be called more than once without&#10;error.  Some kinds of file objects (for example, opened by popen())&#10;may return an exit status upon closing.">
			</Overload>
		</KeyWord>
		<KeyWord name="closerange" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="cmp" func="yes">
			<Overload retVal="" descr="cmp(x, y) -&gt; integer&#10;&#10;Return negative if x&lt;y, zero if x==y, positive if x&gt;y.">
			</Overload>
		</KeyWord>
		<KeyWord name="coerce" func="yes">
			<Overload retVal="" descr="coerce(x, y) -&gt; (x1, y1)&#10;&#10;Return a tuple consisting of the two numeric arguments converted to&#10;a common type, using the same rules as used by arithmetic operations.&#10;If coercion is not possible, raise TypeError.">
			</Overload>
		</KeyWord>
		<KeyWord name="colname" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="combine" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="commit" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="compile" func="yes">
			<Overload retVal="" descr="compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object&#10;&#10;Compile the source string (a Python module, statement or expression)&#10;into a code object that can be executed by the exec statement or eval().&#10;The filename will be used for run-time error messages.&#10;The mode must be 'exec' to compile a module, 'single' to compile a&#10;single (interactive) statement, or 'eval' to compile an expression.&#10;The flags argument, if present, controls which future statements influence&#10;the compilation of the code.&#10;The dont_inherit argument, if non-zero, stops the compilation inheriting&#10;the effects of any future statements in effect in the code calling&#10;compile; if absent or zero these statements do influence the compilation,&#10;in addition to any features explicitly specified.">
			</Overload>
		</KeyWord>
		<KeyWord name="complex" func="yes">
			<Overload retVal="" descr="complex(real[, imag]) -&gt; complex number&#10;&#10;Create a complex number from a real part and an optional imaginary part.&#10;This is equivalent to (real + imag*1j) where imag defaults to 0.">
			</Overload>
		</KeyWord>
		<KeyWord name="conjugate" func="yes">
			<Overload retVal="" descr="Returns self, the complex conjugate of any int.">
			</Overload>
		</KeyWord>
		<KeyWord name="connect" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="connection" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="continue" />
		<KeyWord name="copy" func="yes">
			<Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
			</Overload>
		</KeyWord>
		<KeyWord name="count" func="yes">
			<Overload retVal="" descr="L.count(value) -&gt; integer -- return number of occurrences of value">
			</Overload>
		</KeyWord>
		<KeyWord name="count_records" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="create_named_range" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="create_sheet" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="ctime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="data_seek" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="date" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="debug" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="decode" func="yes">
			<Overload retVal="" descr="S.decode([encoding[,errors]]) -&gt; object&#10;&#10;Decodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;as well as any other name registered with codecs.register_error that is&#10;able to handle UnicodeDecodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="decompile_formula" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="def" />
		<KeyWord name="del" />
		<KeyWord name="delattr" func="yes">
			<Overload retVal="" descr="delattr(object, name)&#10;&#10;Delete a named attribute on an object; delattr(x, 'y') is equivalent to&#10;``del x.y''.">
			</Overload>
		</KeyWord>
		<KeyWord name="deleter" func="yes">
			<Overload retVal="" descr="Descriptor to change the deleter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="derive_encoding" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="describe" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="dict" func="yes">
			<Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference" func="yes">
			<Overload retVal="" descr="Return the difference of two or more sets as a new set.&#10;&#10;(i.e. all elements that are in this set but not the others.)">
			</Overload>
		</KeyWord>
		<KeyWord name="difference_update" func="yes">
			<Overload retVal="" descr="Remove all elements of another set from this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="dir" func="yes">
			<Overload retVal="" descr="dir([object]) -&gt; list of strings&#10;&#10;If called without an argument, return the names in the current scope.&#10;Else, return an alphabetized list of names comprising (some of) the attributes&#10;of the given object, and of attributes reachable from it.&#10;If the object supplies a method named __dir__, it will be used; otherwise&#10;the default dir() logic is used and returns:&#10;  for a module object: the module's attributes.&#10;  for a class object:  its attributes, and recursively the attributes&#10;    of its bases.&#10;  for any other object: its attributes, its class's attributes, and&#10;    recursively the attributes of its class's base classes.">
			</Overload>
		</KeyWord>
		<KeyWord name="discard" func="yes">
			<Overload retVal="" descr="Remove an element from a set if it is a member.&#10;&#10;If the element is not a member, do nothing.">
			</Overload>
		</KeyWord>
		<KeyWord name="displayhook" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="divmod" func="yes">
			<Overload retVal="" descr="divmod(x, y) -&gt; (quotient, remainder)&#10;&#10;Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.">
			</Overload>
		</KeyWord>
		<KeyWord name="dst" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="dump" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="dump_debug_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="dump_formula" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="dup" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="dup2" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="elif" />
		<KeyWord name="else" />
		<KeyWord name="encode" func="yes">
			<Overload retVal="" descr="S.encode([encoding[,errors]]) -&gt; string or unicode&#10;&#10;Encodes S using the codec registered for encoding. encoding defaults&#10;to the default encoding. errors may be given to set a different error&#10;handling scheme. Default is 'strict' meaning that encoding errors raise&#10;a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and&#10;'xmlcharrefreplace' as well as any other name registered with&#10;codecs.register_error that can handle UnicodeEncodeErrors.">
			</Overload>
		</KeyWord>
		<KeyWord name="endswith" func="yes">
			<Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="enumerate" func="yes">
			<Overload retVal="" descr="enumerate(iterable[, start]) -&gt; iterator for index, value of iterable&#10;&#10;Return an enumerate object.  iterable must be another object that supports&#10;iteration.  The enumerate object yields pairs containing a count (from&#10;start, which defaults to zero) and a value yielded by the iterable argument.&#10;enumerate is useful for obtaining an indexed list:&#10;    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...">
			</Overload>
		</KeyWord>
		<KeyWord name="errno" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="error" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="escape" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="escape_dict" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="escape_sequence" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="escape_string" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="eval" func="yes">
			<Overload retVal="" descr="eval(source[, globals[, locals]]) -&gt; value&#10;&#10;Evaluate the source in the context of globals and locals.&#10;The source may be a string representing a Python expression&#10;or a code object as returned by compile().&#10;The globals must be a dictionary and locals can be any mapping,&#10;defaulting to the current globals and locals.&#10;If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="evaluate_name_formula" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="exc_clear" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exc_info" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="except" />
		<KeyWord name="excepthook" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exec" />
		<KeyWord name="execfile" func="yes">
			<Overload retVal="" descr="execfile(filename[, globals[, locals]])&#10;&#10;Read and execute a Python script from a file.&#10;The globals and locals are dictionaries, defaulting to the current&#10;globals and locals.  If only globals is given, locals defaults to it.">
			</Overload>
		</KeyWord>
		<KeyWord name="execl" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execle" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execlp" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execlpe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execve" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execvp" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="execvpe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="exit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="exitfunc" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="expandtabs" func="yes">
			<Overload retVal="" descr="B.expandtabs([tabsize]) -&gt; copy of B&#10;&#10;Return a copy of B where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
			</Overload>
		</KeyWord>
		<KeyWord name="extend" func="yes">
			<Overload retVal="" descr="B.extend(iterable int) -&gt; None&#10;&#10;Append all the elements from the iterator or sequence to the&#10;end of B.">
			</Overload>
		</KeyWord>
		<KeyWord name="fake_globals_get_sheet" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="fdopen" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="fetch_row" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="field_count" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="field_flags" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="file" func="yes">
			<Overload retVal="" descr="file(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),&#10;writing or appending.  The file will be created if it doesn't exist&#10;when opened for writing or appending; it will be truncated when&#10;opened for writing.  Add a 'b' to the mode for binary files.&#10;Add a '+' to the mode to allow simultaneous reading and writing.&#10;If the buffering argument is given, 0 means unbuffered, 1 means line&#10;buffered, and larger numbers specify the buffer size.  The preferred way&#10;to open a file is with the builtin open() function.&#10;Add a 'U' to mode to open the file for input with universal newline&#10;support.  Any line ending in the input file will be seen as a '\n'&#10;in Python.  Also, a file so opened gains the attribute 'newlines';&#10;the value for this attribute is one of None (no newline read yet),&#10;'\r', '\n', '\r\n' or a tuple containing all the newline types seen.&#10;&#10;'U' cannot be combined with 'w' or '+' mode.">
			</Overload>
		</KeyWord>
		<KeyWord name="fileno" func="yes">
			<Overload retVal="" descr='fileno() -&gt; integer "file descriptor".&#10;&#10;This is needed for lower-level file interfaces, such os.read().'>
			</Overload>
		</KeyWord>
		<KeyWord name="filter" func="yes">
			<Overload retVal="" descr="filter(function or None, sequence) -&gt; list, tuple, or string&#10;&#10;Return those items of sequence for which function(item) is true.  If&#10;function is None, return the items that are true.  If sequence is a tuple&#10;or string, return the same type, else return a list.">
			</Overload>
		</KeyWord>
		<KeyWord name="finally" />
		<KeyWord name="find" func="yes">
			<Overload retVal="" descr="S.find(sub [,start [,end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="float" func="yes">
			<Overload retVal="" descr="float(x) -&gt; floating point number&#10;&#10;Convert a string or number to a floating point number, if possible.">
			</Overload>
		</KeyWord>
		<KeyWord name="flush" func="yes">
			<Overload retVal="" descr="flush() -&gt; None.  Flush the internal I/O buffer.">
			</Overload>
		</KeyWord>
		<KeyWord name="for" />
		<KeyWord name="format" func="yes">
			<Overload retVal="" descr="S.format(*args, **kwargs) -&gt; string&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
			</Overload>
		</KeyWord>
		<KeyWord name="from" />
		<KeyWord name="fromhex" func="yes">
			<Overload retVal="" descr="bytearray.fromhex(string) -&gt; bytearray&#10;&#10;Create a bytearray object from a string of hexadecimal numbers.&#10;Spaces between two numbers are accepted.&#10;Example: bytearray.fromhex('B9 01EF') -&gt; bytearray(b'\xb9\x01\xef').">
			</Overload>
		</KeyWord>
		<KeyWord name="fromkeys" func="yes">
			<Overload retVal="" descr="dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.&#10;v defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="fromordinal" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Date">
			</Overload>
		</KeyWord>
		<KeyWord name="fromtimestamp" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="frozenset" func="yes">
			<Overload retVal="" descr="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object&#10;&#10;Build an immutable unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="fstat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="fsync" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="get" func="yes">
			<Overload retVal="" descr="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.">
			</Overload>
		</KeyWord>
		<KeyWord name="get2bytes" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="get_active_sheet" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_autocommit" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="get_character_set_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="get_client_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="get_host_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="get_index" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_named_range" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_named_ranges" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_proto_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="get_record_parts" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="get_record_parts_conditional" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="get_server_info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="get_sheet" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="get_sheet_by_name" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_sheet_names" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="get_sheets" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="getattr" func="yes">
			<Overload retVal="" descr="getattr(object, name[, default]) -&gt; value&#10;&#10;Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.&#10;When a default argument is given, it is returned when the attribute doesn't&#10;exist; without it, an exception is raised in that case.">
			</Overload>
		</KeyWord>
		<KeyWord name="getbof" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="getcheckinterval" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getcwd" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getcwdu" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getdefaultencoding" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getfilesystemencoding" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getpid" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="getprofile" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getrecursionlimit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getrefcount" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getsizeof" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getter" func="yes">
			<Overload retVal="" descr="Descriptor to change the getter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="gettrace" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="getwindowsversion" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="global" />
		<KeyWord name="globals" func="yes">
			<Overload retVal="" descr="globals() -&gt; dictionary&#10;&#10;Return the dictionary containing the current scope's global variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="gmtime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_boundsheet" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_builtinfmtcount" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_codepage" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_country" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_datemode" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_externname" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_externsheet" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_filepass" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_name" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_obj" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_sheethdr" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_sheetsoffset" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_sst" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_supbook" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="handle_writeaccess" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="has_key" func="yes">
			<Overload retVal="" descr="D.has_key(k) -&gt; True if D has a key k, else False">
			</Overload>
		</KeyWord>
		<KeyWord name="hasattr" func="yes">
			<Overload retVal="" descr="hasattr(object, name) -&gt; bool&#10;&#10;Return whether the object has an attribute with the given name.&#10;(This is done by calling getattr(object, name) and catching exceptions.)">
			</Overload>
		</KeyWord>
		<KeyWord name="hash" func="yes">
			<Overload retVal="" descr="hash(object) -&gt; integer&#10;&#10;Return a hash value for the object.  Two objects with the same value have&#10;the same hash value.  The reverse is not necessarily true, but likely.">
			</Overload>
		</KeyWord>
		<KeyWord name="hex" func="yes">
			<Overload retVal="" descr="float.hex() -&gt; string&#10;&#10;Return a hexadecimal representation of a floating-point number.&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
			</Overload>
		</KeyWord>
		<KeyWord name="id" func="yes">
			<Overload retVal="" descr="id(object) -&gt; integer&#10;&#10;Return the identity of an object.  This is guaranteed to be unique among&#10;simultaneously existing objects.  (Hint: it's the object's memory address.)">
			</Overload>
		</KeyWord>
		<KeyWord name="if" />
		<KeyWord name="import" />
		<KeyWord name="in" />
		<KeyWord name="index" func="yes">
			<Overload retVal="" descr="S.index(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.find() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="indices" func="yes">
			<Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#10;&#10;Assuming a sequence of length len, calculate the start and stop&#10;indices, and the stride length of the extended slice described by&#10;S. Out of bounds indices are clipped in a manner consistent with the&#10;handling of normal slices.">
			</Overload>
		</KeyWord>
		<KeyWord name="info" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="initialise_format_info" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="input" func="yes">
			<Overload retVal="" descr="input([prompt]) -&gt; value&#10;&#10;Equivalent to eval(raw_input(prompt)).">
			</Overload>
		</KeyWord>
		<KeyWord name="insert" func="yes">
			<Overload retVal="" descr="B.insert(index, int) -&gt; None&#10;&#10;Insert a single item into the bytearray before the given index.">
			</Overload>
		</KeyWord>
		<KeyWord name="insert_id" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="int" func="yes">
			<Overload retVal="" descr="int(x=0) -&gt; int or long&#10;int(x, base=10) -&gt; int or long&#10;&#10;Convert a number or string to an integer, or return 0 if no arguments&#10;are given.  If x is floating point, the conversion truncates towards zero.&#10;If x is outside the integer range, the function returns a long instead.&#10;&#10;If x is not a number or if base is given, then x must be a string or&#10;Unicode object representing an integer literal in the given base.  The&#10;literal can be preceded by '+' or '-' and be surrounded by whitespace.&#10;The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to&#10;interpret the base from the string as an integer literal.&#10;&gt;&gt;&gt; int('0b100', base=0)&#10;4">
			</Overload>
		</KeyWord>
		<KeyWord name="intern" func="yes">
			<Overload retVal="" descr="intern(string) -&gt; string&#10;&#10;``Intern'' the given string.  This enters the string in the (global)&#10;table of interned strings whose purpose is to speed up dictionary lookups.&#10;Return the string itself or the previously interned string object with the&#10;same value.">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection" func="yes">
			<Overload retVal="" descr="Return the intersection of two or more sets as a new set.&#10;&#10;(i.e. elements that are common to all of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="intersection_update" func="yes">
			<Overload retVal="" descr="Update a set with the intersection of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="is" />
		<KeyWord name="is_integer" func="yes">
			<Overload retVal="" descr="Return True if the float is an integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="isalnum" func="yes">
			<Overload retVal="" descr="S.isalnum() -&gt; bool&#10;&#10;Return True if all characters in S are alphanumeric&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isalpha" func="yes">
			<Overload retVal="" descr="S.isalpha() -&gt; bool&#10;&#10;Return True if all characters in S are alphabetic&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isatty" func="yes">
			<Overload retVal="" descr="isatty() -&gt; true or false.  True if the file is connected to a tty device.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdecimal" func="yes">
			<Overload retVal="" descr="S.isdecimal() -&gt; bool&#10;&#10;Return True if there are only decimal characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdigit" func="yes">
			<Overload retVal="" descr="S.isdigit() -&gt; bool&#10;&#10;Return True if all characters in S are digits&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isdisjoint" func="yes">
			<Overload retVal="" descr="Return True if two sets have a null intersection.">
			</Overload>
		</KeyWord>
		<KeyWord name="isinstance" func="yes">
			<Overload retVal="" descr="isinstance(object, class-or-type-or-tuple) -&gt; bool&#10;&#10;Return whether an object is an instance of a class or of a subclass thereof.&#10;With a type as second argument, return whether that is the object's type.&#10;The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for&#10;isinstance(x, A) or isinstance(x, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="islower" func="yes">
			<Overload retVal="" descr="S.islower() -&gt; bool&#10;&#10;Return True if all cased characters in S are lowercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isnumeric" func="yes">
			<Overload retVal="" descr="S.isnumeric() -&gt; bool&#10;&#10;Return True if there are only numeric characters in S,&#10;False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isocalendar" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Date">
			</Overload>
		</KeyWord>
		<KeyWord name="isoformat" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Date">
			</Overload>
		</KeyWord>
		<KeyWord name="isoweekday" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="isreadable" func="yes">
			<Overload retVal="" descr="Function of pprint">
			</Overload>
		</KeyWord>
		<KeyWord name="isrecursive" func="yes">
			<Overload retVal="" descr="Function of pprint">
			</Overload>
		</KeyWord>
		<KeyWord name="isspace" func="yes">
			<Overload retVal="" descr="S.isspace() -&gt; bool&#10;&#10;Return True if all characters in S are whitespace&#10;and there is at least one character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="issubclass" func="yes">
			<Overload retVal="" descr="issubclass(C, B) -&gt; bool&#10;&#10;Return whether class C is a subclass (i.e., a derived class) of class B.&#10;When using a tuple as the second argument issubclass(X, (A, B, ...)),&#10;is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).">
			</Overload>
		</KeyWord>
		<KeyWord name="issubset" func="yes">
			<Overload retVal="" descr="Report whether another set contains this set.">
			</Overload>
		</KeyWord>
		<KeyWord name="issuperset" func="yes">
			<Overload retVal="" descr="Report whether this set contains another set.">
			</Overload>
		</KeyWord>
		<KeyWord name="istitle" func="yes">
			<Overload retVal="" descr="S.istitle() -&gt; bool&#10;&#10;Return True if S is a titlecased string and there is at least one&#10;character in S, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="isupper" func="yes">
			<Overload retVal="" descr="S.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in S are uppercase and there is&#10;at least one cased character in S, False otherwise.">
			</Overload>
		</KeyWord>
		<KeyWord name="items" func="yes">
			<Overload retVal="" descr="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples">
			</Overload>
		</KeyWord>
		<KeyWord name="iter" func="yes">
			<Overload retVal="" descr="iter(collection) -&gt; iterator&#10;iter(callable, sentinel) -&gt; iterator&#10;&#10;Get an iterator from an object.  In the first form, the argument must&#10;supply its own iterator, or be a sequence.&#10;In the second form, the callable is called until it returns the sentinel.">
			</Overload>
		</KeyWord>
		<KeyWord name="iteritems" func="yes">
			<Overload retVal="" descr="D.iteritems() -&gt; an iterator over the (key, value) items of D">
			</Overload>
		</KeyWord>
		<KeyWord name="iterkeys" func="yes">
			<Overload retVal="" descr="D.iterkeys() -&gt; an iterator over the keys of D">
			</Overload>
		</KeyWord>
		<KeyWord name="itervalues" func="yes">
			<Overload retVal="" descr="D.itervalues() -&gt; an iterator over the values of D">
			</Overload>
		</KeyWord>
		<KeyWord name="join" func="yes">
			<Overload retVal="" descr="S.join(iterable) -&gt; unicode&#10;&#10;Return a string which is the concatenation of the strings in the&#10;iterable.  The separator between elements is S.">
			</Overload>
		</KeyWord>
		<KeyWord name="keys" func="yes">
			<Overload retVal="" descr="D.keys() -&gt; list of D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="kill" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lambda" />
		<KeyWord name="len" func="yes">
			<Overload retVal="" descr="len(object) -&gt; integer&#10;&#10;Return the number of items of a sequence or collection.">
			</Overload>
		</KeyWord>
		<KeyWord name="list" func="yes">
			<Overload retVal="" descr="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items">
			</Overload>
		</KeyWord>
		<KeyWord name="listdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="ljust" func="yes">
			<Overload retVal="" descr="S.ljust(width[, fillchar]) -&gt; string&#10;&#10;Return S left-justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
			</Overload>
		</KeyWord>
		<KeyWord name="load_workbook" func="yes">
			<Overload retVal="" descr="Function of openpyxl">
			</Overload>
		</KeyWord>
		<KeyWord name="locals" func="yes">
			<Overload retVal="" descr="locals() -&gt; dictionary&#10;&#10;Update and return a dictionary containing the current scope's local variables.">
			</Overload>
		</KeyWord>
		<KeyWord name="localtime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="long" func="yes">
			<Overload retVal="" descr="long(x=0) -&gt; long&#10;long(x, base=10) -&gt; long&#10;&#10;Convert a number or string to a long integer, or return 0L if no arguments&#10;are given.  If x is floating point, the conversion truncates towards zero.&#10;&#10;If x is not a number or if base is given, then x must be a string or&#10;Unicode object representing an integer literal in the given base.  The&#10;literal can be preceded by '+' or '-' and be surrounded by whitespace.&#10;The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to&#10;interpret the base from the string as an integer literal.&#10;&gt;&gt;&gt; int('0b100', base=0)&#10;4L">
			</Overload>
		</KeyWord>
		<KeyWord name="lower" func="yes">
			<Overload retVal="" descr="S.lower() -&gt; string&#10;&#10;Return a copy of the string S converted to lowercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="lseek" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lstat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="lstrip" func="yes">
			<Overload retVal="" descr="S.lstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="makedirs" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="map" func="yes">
			<Overload retVal="" descr="map(function, sequence[, sequence, ...]) -&gt; list&#10;&#10;Return a list of the results of applying the function to the items of&#10;the argument sequence(s).  If more than one sequence is given, the&#10;function is called with an argument list consisting of the corresponding&#10;item of each sequence, substituting None for missing values when not all&#10;sequences have the same length.  If the function is None, return a list of&#10;the items of the sequence (or a list of tuples if more than one sequence).">
			</Overload>
		</KeyWord>
		<KeyWord name="max" func="yes">
			<Overload retVal="" descr="max(iterable[, key=func]) -&gt; value&#10;max(a, b, c, ...[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its largest item.&#10;With two or more arguments, return the largest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="memoryview" func="yes">
			<Overload retVal="" descr="memoryview(object)&#10;&#10;Create a new memoryview object which references the given object.">
			</Overload>
		</KeyWord>
		<KeyWord name="min" func="yes">
			<Overload retVal="" descr="min(iterable[, key=func]) -&gt; value&#10;min(a, b, c, ...[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its smallest item.&#10;With two or more arguments, return the smallest argument.">
			</Overload>
		</KeyWord>
		<KeyWord name="mkdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="mktime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="mro" func="yes">
			<Overload retVal="" descr="mro() -&gt; list&#10;return a type's method resolution order">
			</Overload>
		</KeyWord>
		<KeyWord name="names_epilogue" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="next" func="yes">
			<Overload retVal="" descr="x.next() -&gt; the next value, or raise StopIteration">
			</Overload>
		</KeyWord>
		<KeyWord name="next_result" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="not" />
		<KeyWord name="now" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="num_fields" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="num_rows" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="object" func="yes">
			<Overload retVal="" descr="The most base type">
			</Overload>
		</KeyWord>
		<KeyWord name="oct" func="yes">
			<Overload retVal="" descr="oct(number) -&gt; string&#10;&#10;Return the octal representation of an integer or long integer.">
			</Overload>
		</KeyWord>
		<KeyWord name="open" func="yes">
			<Overload retVal="" descr="open(name[, mode[, buffering]]) -&gt; file object&#10;&#10;Open a file using the file() type, returns a file object.  This is the&#10;preferred way to open a file.  See file.__doc__ for further information.">
			</Overload>
		</KeyWord>
		<KeyWord name="open_workbook" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl" func="yes">
			<Overload retVal="" descr="Imports for the openpyxl package.">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook" func="yes">
			<Overload retVal="" descr="Workbook is the container for all other parts of the document.">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.active" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.add_named_range" func="yes">
			<Overload retVal="" descr="Add an existing named_range to the list of named_ranges.">
				<Param name="self" />
				<Param name="named_range" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.add_sheet" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.create_named_range" func="yes">
			<Overload retVal="" descr="Create a new named_range on a worksheet">
				<Param name="self" />
				<Param name="name" />
				<Param name="worksheet" />
				<Param name="range" />
				<Param name="[scope=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.create_sheet" func="yes">
			<Overload retVal="" descr="Create a worksheet (at an optional index).&#10;&#10;:param index: optional position at which the sheet will be inserted&#10;:type index: int">
				<Param name="self" />
				<Param name="[index=None" />
				<Param name="[title=None]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_active_sheet" func="yes">
			<Overload retVal="" descr="Returns the current active sheet.">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_index" func="yes">
			<Overload retVal="" descr="Return the index of the worksheet.">
				<Param name="self" />
				<Param name="worksheet" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_named_range" func="yes">
			<Overload retVal="" descr="Return the range specified by name.">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_named_ranges" func="yes">
			<Overload retVal="" descr="Return all named ranges">
				<Param name="self" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_sheet_by_name" func="yes">
			<Overload retVal="" descr="Returns a worksheet by its name.&#10;&#10;:param name: the name of the worksheet to look for&#10;:type name: string">
				<Param name="self" />
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.get_sheet_names" />
		<KeyWord name="openpyxl.Workbook.read_only" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.read_workbook_settings" func="yes">
			<Overload retVal="" descr=>
				<Param name="[**]" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.remove_named_range" func="yes">
			<Overload retVal="" descr="Remove a named_range from this workbook.">
				<Param name="self" />
				<Param name="named_range" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.remove_sheet" func="yes">
			<Overload retVal="" descr="Remove a worksheet from this workbook.">
				<Param name="self" />
				<Param name="worksheet" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.save" func="yes">
			<Overload retVal="" descr="Save the current workbook under the given `filename`.&#10;Use this function instead of using an `ExcelWriter`.&#10;&#10;.. warning::&#10;    When creating your workbook using `write_only` set to True,&#10;    you will only be able to call this function once. Subsequents attempts to&#10;    modify or save the file will raise an :class:`openpyxl.shared.exc.WorkbookAlreadySaved` exception.">
				<Param name="self" />
				<Param name="filename" />
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.shared_styles" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.sheetnames" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.Workbook.write_only" func="yes">
			<Overload retVal="" descr="(property)">
			</Overload>
		</KeyWord>
		<KeyWord name="openpyxl.load_workbook" func="yes">
			<Overload retVal="" descr="Open the given filename and return the workbook&#10;&#10;:param filename: the path to open or a file-like object&#10;:type filename: string or a file-like object open in binary mode c.f., :class:`zipfile.ZipFile`&#10;&#10;:param read_only: optimised for reading, content cannot be edited&#10;:type read_only: bool&#10;&#10;:param use_iterators: use lazy load for cells&#10;:type use_iterators: bool&#10;&#10;:param keep_vba: preseve vba content (this does NOT mean you can use it)&#10;:type keep_vba: bool&#10;&#10;:param guess_types: guess cell content type and do not read it from the file&#10;:type guess_types: bool&#10;&#10;:param data_only: controls whether cells with formulae have either the formula (default) or the value stored the last time Excel read the sheet&#10;:type data_only: bool&#10;&#10;:rtype: :class:`openpyxl.workbook.Workbook`&#10;&#10;.. note::&#10;&#10;    When using lazy load, all worksheets will be :class:`openpyxl.worksheet.iter_worksheet.IterableWorksheet`&#10;    and the returned workbook will be read-only.">
				<Param name="filename" />
				<Param name="[read_only=False" />
				<Param name="[use_iterators=False" />
				<Param name="[keep_vba=False" />
				<Param name="[guess_types=False" />
				<Param name="[data_only=False]]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="or" />
		<KeyWord name="ord" func="yes">
			<Overload retVal="" descr="ord(c) -&gt; integer&#10;&#10;Return the integer ordinal of a one-character string.">
			</Overload>
		</KeyWord>
		<KeyWord name="os" func="yes">
			<Overload retVal="" descr="OS routines for NT or Posix depending on what system we're on.&#10;&#10;This exports:&#10;  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.&#10;  - os.path is one of the modules posixpath, or ntpath&#10;  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'&#10;  - os.curdir is a string representing the current directory ('.' or ':')&#10;  - os.pardir is a string representing the parent directory ('..' or '::')&#10;  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\')&#10;  - os.extsep is the extension separator ('.' or '/')&#10;  - os.altsep is the alternate pathname separator (None or '/')&#10;  - os.pathsep is the component separator used in $PATH etc&#10;  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')&#10;  - os.defpath is the default search path for executables&#10;  - os.devnull is the file path of the null device ('/dev/null', etc.)&#10;&#10;Programs that import and use 'os' stand a better chance of being&#10;portable between different platforms.  Of course, they must then&#10;only use functions that are defined by all platforms (e.g., unlink&#10;and opendir), and leave all pathname manipulation to os.path&#10;(e.g., split and join).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_APPEND" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_BINARY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_CREAT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_EXCL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_NOINHERIT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_RANDOM" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_RDWR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_SEQUENTIAL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_SHORT_LIVED" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TEMPORARY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TEXT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_TRUNC" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.O_WRONLY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_DETACH" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_NOWAIT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_NOWAITO" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.P_OVERLAY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.R_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.SEEK_CUR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.SEEK_END" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.TMP_MAX" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.W_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.X_OK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.abort" func="yes">
			<Overload retVal="" descr="abort() -&gt; does not return!&#10;&#10;Abort the interpreter immediately.  This 'dumps core' or otherwise fails&#10;in the hardest way possible on the hosting operating system.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.access" func="yes">
			<Overload retVal="" descr="access(path, mode) -&gt; True if granted, False otherwise&#10;&#10;Use the real uid/gid to test for access to a path.  Note that most&#10;operations will use the effective uid/gid, therefore this routine can&#10;be used in a suid/sgid environment to test if the invoking user has the&#10;specified access to the path.  The mode argument can be F_OK to test&#10;existence, or the inclusive-OR of R_OK, W_OK, and X_OK.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.altsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.chdir" func="yes">
			<Overload retVal="" descr="chdir(path)&#10;&#10;Change the current working directory to the specified path.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.chmod" func="yes">
			<Overload retVal="" descr="chmod(path, mode)&#10;&#10;Change the access permissions of a file.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.close" func="yes">
			<Overload retVal="" descr="close(fd)&#10;&#10;Close a file descriptor (for low level IO).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.closerange" func="yes">
			<Overload retVal="" descr="closerange(fd_low, fd_high)&#10;&#10;Closes all file descriptors in [fd_low, fd_high), ignoring errors.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.curdir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.defpath" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.devnull" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.dup" func="yes">
			<Overload retVal="" descr="dup(fd) -&gt; fd2&#10;&#10;Return a duplicate of a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.dup2" func="yes">
			<Overload retVal="" descr="dup2(old_fd, new_fd)&#10;&#10;Duplicate file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.environ" func="yes">
			<Overload retVal="" descr="(instance)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error" func="yes">
			<Overload retVal="" descr="OS system call failed.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.errno" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.filename" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.error.strerror" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execl" func="yes">
			<Overload retVal="" descr="execl(file, *args)&#10;&#10;Execute the executable file with argument list args, replacing the&#10;current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execle" func="yes">
			<Overload retVal="" descr="execle(file, *args, env)&#10;&#10;Execute the executable file with argument list args and&#10;environment env, replacing the current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execlp" func="yes">
			<Overload retVal="" descr="execlp(file, *args)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args, replacing the current process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execlpe" func="yes">
			<Overload retVal="" descr="execlpe(file, *args, env)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args and environment env, replacing the current&#10;process.">
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execv" func="yes">
			<Overload retVal="" descr="execv(path, args)&#10;&#10;Execute an executable path with arguments, replacing current process.&#10;&#10;    path: path of executable file&#10;    args: tuple or list of strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execve" func="yes">
			<Overload retVal="" descr="execve(path, args, env)&#10;&#10;Execute a path with arguments and environment, replacing current process.&#10;&#10;    path: path of executable file&#10;    args: tuple or list of arguments&#10;    env: dictionary of strings mapping to strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.execvp" func="yes">
			<Overload retVal="" descr="execvp(file, args)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args, replacing the current process.&#10;args may be a list or tuple of strings.">
				<Param name="file" />
				<Param name="args" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.execvpe" func="yes">
			<Overload retVal="" descr="execvpe(file, args, env)&#10;&#10;Execute the executable file (which is searched for along $PATH)&#10;with argument list args and environment env , replacing the&#10;current process.&#10;args may be a list or tuple of strings.">
				<Param name="file" />
				<Param name="args" />
				<Param name="env" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.extsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fdopen" func="yes">
			<Overload retVal="" descr="fdopen(fd [, mode='r' [, bufsize]]) -&gt; file_object&#10;&#10;Return an open file object connected to a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fstat" func="yes">
			<Overload retVal="" descr="fstat(fd) -&gt; stat result&#10;&#10;Like stat(), but for an open file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.fsync" func="yes">
			<Overload retVal="" descr="fsync(fildes)&#10;&#10;force write of file with filedescriptor to disk.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getcwd" func="yes">
			<Overload retVal="" descr="getcwd() -&gt; path&#10;&#10;Return a string representing the current working directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getcwdu" func="yes">
			<Overload retVal="" descr="getcwdu() -&gt; path&#10;&#10;Return a unicode string representing the current working directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.getenv" func="yes">
			<Overload retVal="" descr="Get an environment variable, return None if it doesn't exist.&#10;The optional second argument can specify an alternate default.">
				<Param name="key" />
				<Param name="[default=None]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.getpid" func="yes">
			<Overload retVal="" descr="getpid() -&gt; pid&#10;&#10;Return the current process id">
			</Overload>
		</KeyWord>
		<KeyWord name="os.isatty" func="yes">
			<Overload retVal="" descr="isatty(fd) -&gt; bool&#10;&#10;Return True if the file descriptor 'fd' is an open file descriptor&#10;connected to the slave end of a terminal.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.kill" func="yes">
			<Overload retVal="" descr="kill(pid, sig)&#10;&#10;Kill a process with a signal.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.linesep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.listdir" func="yes">
			<Overload retVal="" descr="listdir(path) -&gt; list_of_strings&#10;&#10;Return a list containing the names of the entries in the directory.&#10;&#10;    path: path of directory to list&#10;&#10;The list is in arbitrary order.  It does not include the special&#10;entries '.' and '..' even if they are present in the directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.lseek" func="yes">
			<Overload retVal="" descr="lseek(fd, pos, how) -&gt; newpos&#10;&#10;Set the current position of a file descriptor.&#10;Return the new cursor position in bytes, starting from the beginning.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.lstat" func="yes">
			<Overload retVal="" descr="lstat(path) -&gt; stat result&#10;&#10;Like stat(path), but do not follow symbolic links.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.makedirs" func="yes">
			<Overload retVal="" descr="makedirs(path [, mode=0777])&#10;&#10;Super-mkdir; create a leaf directory and all intermediate ones.&#10;Works like mkdir, except that any intermediate path segment (not&#10;just the rightmost) will be created if it does not exist.  This is&#10;recursive.">
				<Param name="name" />
				<Param name="[mode=511]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.mkdir" func="yes">
			<Overload retVal="" descr="mkdir(path [, mode=0777])&#10;&#10;Create a directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.name" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.open" func="yes">
			<Overload retVal="" descr="open(filename, flag [, mode=0777]) -&gt; fd&#10;&#10;Open a file (for low level IO).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pardir" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pathsep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.pipe" func="yes">
			<Overload retVal="" descr="pipe() -&gt; (read_end, write_end)&#10;&#10;Create a pipe.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.popen" func="yes">
			<Overload retVal="" descr="popen(command [, mode='r' [, bufsize]]) -&gt; pipe&#10;&#10;Open a pipe to/from a command returning a file object.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.popen2" />
		<KeyWord name="os.popen3" />
		<KeyWord name="os.popen4" />
		<KeyWord name="os.putenv" func="yes">
			<Overload retVal="" descr="putenv(key, value)&#10;&#10;Change or add an environment variable.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.read" func="yes">
			<Overload retVal="" descr="read(fd, buffersize) -&gt; string&#10;&#10;Read a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.remove" func="yes">
			<Overload retVal="" descr="remove(path)&#10;&#10;Remove a file (same as unlink(path)).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.removedirs" func="yes">
			<Overload retVal="" descr="removedirs(path)&#10;&#10;Super-rmdir; remove a leaf directory and all empty intermediate&#10;ones.  Works like rmdir except that, if the leaf directory is&#10;successfully removed, directories corresponding to rightmost path&#10;segments will be pruned away until either the whole path is&#10;consumed or an error occurs.  Errors during this latter phase are&#10;ignored -- they generally mean that a directory was not empty.">
				<Param name="name" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.rename" func="yes">
			<Overload retVal="" descr="rename(old, new)&#10;&#10;Rename a file or directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.renames" func="yes">
			<Overload retVal="" descr="renames(old, new)&#10;&#10;Super-rename; create directories as necessary and delete any left&#10;empty.  Works like rename, except creation of any intermediate&#10;directories needed to make the new pathname good is attempted&#10;first.  After the rename, directories corresponding to rightmost&#10;path segments of the old name will be pruned until either the&#10;whole path is consumed or a nonempty directory is found.&#10;&#10;Note: this function can fail with the new directory structure made&#10;if you lack permissions needed to unlink the leaf directory or&#10;file.">
				<Param name="old" />
				<Param name="new" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.rmdir" func="yes">
			<Overload retVal="" descr="rmdir(path)&#10;&#10;Remove a directory.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.sep" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnl" func="yes">
			<Overload retVal="" descr="spawnl(mode, file, *args) -&gt; integer&#10;&#10;Execute file with arguments from args in a subprocess.&#10;If mode == P_NOWAIT return the pid of the process.&#10;If mode == P_WAIT return the process's exit code if it exits normally;&#10;otherwise return -SIG, where SIG is the signal that killed it.">
				<Param name="mode" />
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnle" func="yes">
			<Overload retVal="" descr="spawnle(mode, file, *args, env) -&gt; integer&#10;&#10;Execute file with arguments from args in a subprocess with the&#10;supplied environment.&#10;If mode == P_NOWAIT return the pid of the process.&#10;If mode == P_WAIT return the process's exit code if it exits normally;&#10;otherwise return -SIG, where SIG is the signal that killed it.">
				<Param name="mode" />
				<Param name="file" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnv" func="yes">
			<Overload retVal="" descr="spawnv(mode, path, args)&#10;&#10;Execute the program 'path' in a new process.&#10;&#10;    mode: mode of process creation&#10;    path: path of executable file&#10;    args: tuple or list of strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.spawnve" func="yes">
			<Overload retVal="" descr="spawnve(mode, path, args, env)&#10;&#10;Execute the program 'path' in a new process.&#10;&#10;    mode: mode of process creation&#10;    path: path of executable file&#10;    args: tuple or list of arguments&#10;    env: dictionary of strings mapping to strings">
			</Overload>
		</KeyWord>
		<KeyWord name="os.startfile" func="yes">
			<Overload retVal="" descr="startfile(filepath [, operation]) - Start a file with its associated&#10;application.&#10;&#10;When &quot;operation&quot; is not specified or &quot;open&quot;, this acts like&#10;double-clicking the file in Explorer, or giving the file name as an&#10;argument to the DOS &quot;start&quot; command: the file is opened with whatever&#10;application (if any) its extension is associated.&#10;When another &quot;operation&quot; is given, it specifies what should be done with&#10;the file.  A typical operation is &quot;print&quot;.&#10;&#10;startfile returns as soon as the associated application is launched.&#10;There is no option to wait for the application to close, and no way&#10;to retrieve the application's exit status.&#10;&#10;The filepath is relative to the current directory.  If you want to use&#10;an absolute path, make sure the first character is not a slash (&quot;/&quot;);&#10;the underlying Win32 ShellExecute function doesn't work if it is.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat" func="yes">
			<Overload retVal="" descr="stat(path) -&gt; stat result&#10;&#10;Perform a stat system call on the given path.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_float_times" func="yes">
			<Overload retVal="" descr="stat_float_times([newval]) -&gt; oldval&#10;&#10;Determine whether os.[lf]stat represents time stamps as float objects.&#10;If newval is True, future calls to stat() return floats, if it is False,&#10;future calls return ints. &#10;If newval is omitted, return the current setting.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result" func="yes">
			<Overload retVal="" descr="stat_result: Result from stat or lstat.&#10;&#10;This object may be accessed either as a tuple of&#10;  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)&#10;or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.&#10;&#10;Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,&#10;or st_flags, they are available as attributes only.&#10;&#10;See os.stat for more information.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.n_unnamed_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_atime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_ctime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_dev" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_gid" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_ino" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_mode" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_mtime" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_nlink" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_size" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.stat_result.st_uid" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result" func="yes">
			<Overload retVal="" descr="statvfs_result: Result from statvfs or fstatvfs.&#10;&#10;This object may be accessed either as a tuple of&#10;  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),&#10;or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.&#10;&#10;See os.statvfs for more information.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bavail" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bfree" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_blocks" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_bsize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_favail" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_ffree" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_files" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_flag" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_frsize" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.f_namemax" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.statvfs_result.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="os.strerror" func="yes">
			<Overload retVal="" descr="strerror(code) -&gt; string&#10;&#10;Translate an error code to a message string.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.system" func="yes">
			<Overload retVal="" descr="system(command) -&gt; exit_status&#10;&#10;Execute the command (a string) in a subshell.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tempnam" func="yes">
			<Overload retVal="" descr="tempnam([dir[, prefix]]) -&gt; string&#10;&#10;Return a unique name for a temporary file.&#10;The directory and a prefix may be specified as strings; they may be omitted&#10;or None if not needed.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.times" func="yes">
			<Overload retVal="" descr="times() -&gt; (utime, stime, cutime, cstime, elapsed_time)&#10;&#10;Return a tuple of floating point numbers indicating process times.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tmpfile" func="yes">
			<Overload retVal="" descr="tmpfile() -&gt; file object&#10;&#10;Create a temporary file with no directory entries.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.tmpnam" func="yes">
			<Overload retVal="" descr="tmpnam() -&gt; string&#10;&#10;Return a unique name for a temporary file.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.umask" func="yes">
			<Overload retVal="" descr="umask(new_mask) -&gt; old_mask&#10;&#10;Set the current numeric umask and return the previous umask.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.unlink" func="yes">
			<Overload retVal="" descr="unlink(path)&#10;&#10;Remove a file (same as remove(path)).">
			</Overload>
		</KeyWord>
		<KeyWord name="os.unsetenv" />
		<KeyWord name="os.urandom" func="yes">
			<Overload retVal="" descr="urandom(n) -&gt; str&#10;&#10;Return n random bytes suitable for cryptographic use.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.utime" func="yes">
			<Overload retVal="" descr="utime(path, (atime, mtime))&#10;utime(path, None)&#10;&#10;Set the access and modified time of the file to the given values.  If the&#10;second form is used, set the access and modified times to the current time.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.waitpid" func="yes">
			<Overload retVal="" descr="waitpid(pid, options) -&gt; (pid, status &lt;&lt; 8)&#10;&#10;Wait for completion of a given process.  options is ignored on Windows.">
			</Overload>
		</KeyWord>
		<KeyWord name="os.walk" func="yes">
			<Overload retVal="" descr="Directory tree generator.&#10;&#10;For each directory in the directory tree rooted at top (including top&#10;itself, but excluding '.' and '..'), yields a 3-tuple&#10;&#10;    dirpath, dirnames, filenames&#10;&#10;dirpath is a string, the path to the directory.  dirnames is a list of&#10;the names of the subdirectories in dirpath (excluding '.' and '..').&#10;filenames is a list of the names of the non-directory files in dirpath.&#10;Note that the names in the lists are just names, with no path components.&#10;To get a full path (which begins with top) to a file or directory in&#10;dirpath, do os.path.join(dirpath, name).&#10;&#10;If optional arg 'topdown' is true or not specified, the triple for a&#10;directory is generated before the triples for any of its subdirectories&#10;(directories are generated top down).  If topdown is false, the triple&#10;for a directory is generated after the triples for all of its&#10;subdirectories (directories are generated bottom up).&#10;&#10;When topdown is true, the caller can modify the dirnames list in-place&#10;(e.g., via del or slice assignment), and walk will only recurse into the&#10;subdirectories whose names remain in dirnames; this can be used to prune the&#10;search, or to impose a specific order of visiting.  Modifying dirnames when&#10;topdown is false is ineffective, since the directories in dirnames have&#10;already been generated by the time dirnames itself is generated. No matter&#10;the value of topdown, the list of subdirectories is retrieved before the&#10;tuples for the directory and its subdirectories are generated.&#10;&#10;By default errors from the os.listdir() call are ignored.  If&#10;optional arg 'onerror' is specified, it should be a function; it&#10;will be called with one argument, an os.error instance.  It can&#10;report the error to continue with the walk, or raise the exception&#10;to abort the walk.  Note that the filename is available as the&#10;filename attribute of the exception object.&#10;&#10;By default, os.walk does not follow symbolic links to subdirectories on&#10;systems that support them.  In order to get this functionality, set the&#10;optional argument 'followlinks' to true.&#10;&#10;Caution:  if you pass a relative pathname for top, don't change the&#10;current working directory between resumptions of walk.  walk never&#10;changes the current directory, and assumes that the client doesn't&#10;either.&#10;&#10;Example:&#10;&#10;import os&#10;from os.path import join, getsize&#10;for root, dirs, files in os.walk('python/Lib/email'):&#10;    print root, &quot;consumes&quot;,&#10;    print sum([getsize(join(root, name)) for name in files]),&#10;    print &quot;bytes in&quot;, len(files), &quot;non-directory files&quot;&#10;    if 'CVS' in dirs:&#10;        dirs.remove('CVS')  # don't visit CVS directories">
				<Param name="top" />
				<Param name="[topdown=True" />
				<Param name="[onerror=None" />
				<Param name="[followlinks=False]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="os.write" func="yes">
			<Overload retVal="" descr="write(fd, string) -&gt; byteswritten&#10;&#10;Write a string to a file descriptor.">
			</Overload>
		</KeyWord>
		<KeyWord name="parse_globals" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="partition" func="yes">
			<Overload retVal="" descr="S.partition(sep) -&gt; (head, sep, tail)&#10;&#10;Search for the separator sep in S, and return the part before it,&#10;the separator itself, and the part after it.  If the separator is not&#10;found, return S and two empty strings.">
			</Overload>
		</KeyWord>
		<KeyWord name="pass" />
		<KeyWord name="pformat" func="yes">
			<Overload retVal="" descr="Function of pprint">
			</Overload>
		</KeyWord>
		<KeyWord name="ping" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="pipe" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="pop" func="yes">
			<Overload retVal="" descr="L.pop([index]) -&gt; item -- remove and return item at index (default last).&#10;Raises IndexError if list is empty or index is out of range.">
			</Overload>
		</KeyWord>
		<KeyWord name="popen" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen2" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen3" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popen4" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="popitem" func="yes">
			<Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="pow" func="yes">
			<Overload retVal="" descr="pow(x, y[, z]) -&gt; number&#10;&#10;With two arguments, equivalent to x**y.  With three arguments,&#10;equivalent to (x**y) % z, but may be more efficient (e.g. for longs).">
			</Overload>
		</KeyWord>
		<KeyWord name="pprint" func="yes">
			<Overload retVal="" descr="Support to pretty-print lists, tuples, &amp; dictionaries recursively.&#10;&#10;Very simple, but useful, especially in debugging data structures.&#10;&#10;Classes&#10;-------&#10;&#10;PrettyPrinter()&#10;    Handle pretty-printing operations onto a stream using a configured&#10;    set of formatting parameters.&#10;&#10;Functions&#10;---------&#10;&#10;pformat()&#10;    Format a Python object into a pretty-printed representation.&#10;&#10;pprint()&#10;    Pretty-print a Python object to a stream [default is sys.stdout].&#10;&#10;saferepr()&#10;    Generate a 'standard' repr()-like value, but protect against recursive&#10;    data structures.">
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.PrettyPrinter" func="yes">
			<Overload retVal="" descr="(classobj)">
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.isreadable" func="yes">
			<Overload retVal="" descr="Determine if saferepr(object) is readable by eval().">
				<Param name="object" />
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.isrecursive" func="yes">
			<Overload retVal="" descr="Determine if object requires a recursive representation.">
				<Param name="object" />
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.pformat" func="yes">
			<Overload retVal="" descr="Format a Python object into a pretty-printed representation.">
				<Param name="object" />
				<Param name="[indent=1" />
				<Param name="[width=80" />
				<Param name="[depth=None]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.pprint" func="yes">
			<Overload retVal="" descr="Pretty-print a Python object to a stream [default is sys.stdout].">
				<Param name="object" />
				<Param name="[stream=None" />
				<Param name="[indent=1" />
				<Param name="[width=80" />
				<Param name="[depth=None]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="pprint.saferepr" func="yes">
			<Overload retVal="" descr="Version of repr() which can handle recursive data structures.">
				<Param name="object" />
			</Overload>
		</KeyWord>
		<KeyWord name="print" />
		<KeyWord name="property" func="yes">
			<Overload retVal="" descr="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute&#10;&#10;fget is a function to be used for getting an attribute value, and likewise&#10;fset is a function for setting, and fdel a function for del'ing, an&#10;attribute.  Typical use is to define a managed attribute x:&#10;&#10;class C(object):&#10;    def getx(self): return self._x&#10;    def setx(self, value): self._x = value&#10;    def delx(self): del self._x&#10;    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)&#10;&#10;Decorators make defining new properties or modifying existing ones easy:&#10;&#10;class C(object):&#10;    @property&#10;    def x(self):&#10;        &quot;I am the 'x' property.&quot;&#10;        return self._x&#10;    @x.setter&#10;    def x(self, value):&#10;        self._x = value&#10;    @x.deleter&#10;    def x(self):&#10;        del self._x">
			</Overload>
		</KeyWord>
		<KeyWord name="putenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="query" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="raise" />
		<KeyWord name="range" func="yes">
			<Overload retVal="" descr="range(stop) -&gt; list of integers&#10;range(start, stop[, step]) -&gt; list of integers&#10;&#10;Return a list containing an arithmetic progression of integers.&#10;range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.&#10;When step is given, it specifies the increment (or decrement).&#10;For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!&#10;These are exactly the valid indices for a list of 4 elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="rangename3d" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="rangename3drel" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="raw_input" func="yes">
			<Overload retVal="" descr="raw_input([prompt]) -&gt; string&#10;&#10;Read a string from standard input.  The trailing newline is stripped.&#10;If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.&#10;On Unix, GNU readline is used if enabled.  The prompt string, if given,&#10;is printed without a trailing newline before reading.">
			</Overload>
		</KeyWord>
		<KeyWord name="read" func="yes">
			<Overload retVal="" descr="read([size]) -&gt; read at most size bytes, returned as a string.&#10;&#10;If the size argument is negative or omitted, read until EOF is reached.&#10;Notice that when in non-blocking mode, less data than what was requested&#10;may be returned, even if no size parameter was given.">
			</Overload>
		</KeyWord>
		<KeyWord name="read_workbook_settings" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="readinto" func="yes">
			<Overload retVal="" descr="readinto() -&gt; Undocumented.  Don't use this; it may go away.">
			</Overload>
		</KeyWord>
		<KeyWord name="readline" func="yes">
			<Overload retVal="" descr="readline([size]) -&gt; next line from the file, as a string.&#10;&#10;Retain newline.  A non-negative size argument limits the maximum&#10;number of bytes to return (an incomplete line may be returned then).&#10;Return an empty string at EOF.">
			</Overload>
		</KeyWord>
		<KeyWord name="readlines" func="yes">
			<Overload retVal="" descr="readlines([size]) -&gt; list of strings, each a line from the file.&#10;&#10;Call readline() repeatedly and return a list of the lines so read.&#10;The optional size argument, if given, is an approximate bound on the&#10;total number of bytes in the lines returned.">
			</Overload>
		</KeyWord>
		<KeyWord name="reduce" func="yes">
			<Overload retVal="" descr="reduce(function, sequence[, initial]) -&gt; value&#10;&#10;Apply a function of two arguments cumulatively to the items of a sequence,&#10;from left to right, so as to reduce the sequence to a single value.&#10;For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates&#10;((((1+2)+3)+4)+5).  If initial is present, it is placed before the items&#10;of the sequence in the calculation, and serves as a default when the&#10;sequence is empty.">
			</Overload>
		</KeyWord>
		<KeyWord name="release_resources" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="reload" func="yes">
			<Overload retVal="" descr="reload(module) -&gt; module&#10;&#10;Reload the module.  The module must have been successfully imported before.">
			</Overload>
		</KeyWord>
		<KeyWord name="remove" func="yes">
			<Overload retVal="" descr="Remove an element from a set; it must be a member.&#10;&#10;If the element is not a member, raise a KeyError.">
			</Overload>
		</KeyWord>
		<KeyWord name="remove_named_range" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="remove_sheet" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="removedirs" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="rename" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="renames" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="replace" func="yes">
			<Overload retVal="" descr="B.replace(old, new[, count]) -&gt; bytes&#10;&#10;Return a copy of B with all occurrences of subsection&#10;old replaced by new.  If the optional argument count is&#10;given, only the first count occurrences are replaced.">
			</Overload>
		</KeyWord>
		<KeyWord name="repr" func="yes">
			<Overload retVal="" descr="repr(object) -&gt; string&#10;&#10;Return the canonical string representation of the object.&#10;For most object types, eval(repr(object)) == object.">
			</Overload>
		</KeyWord>
		<KeyWord name="result" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="return" />
		<KeyWord name="reverse" func="yes">
			<Overload retVal="" descr="L.reverse() -- reverse *IN PLACE*">
			</Overload>
		</KeyWord>
		<KeyWord name="reversed" func="yes">
			<Overload retVal="" descr="reversed(sequence) -&gt; reverse iterator over values of the sequence&#10;&#10;Return a reverse iterator">
			</Overload>
		</KeyWord>
		<KeyWord name="rfind" func="yes">
			<Overload retVal="" descr="B.rfind(sub [,start [,end]]) -&gt; int&#10;&#10;Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
			</Overload>
		</KeyWord>
		<KeyWord name="rindex" func="yes">
			<Overload retVal="" descr="S.rindex(sub [,start [,end]]) -&gt; int&#10;&#10;Like S.rfind() but raise ValueError when the substring is not found.">
			</Overload>
		</KeyWord>
		<KeyWord name="rjust" func="yes">
			<Overload retVal="" descr="B.rjust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B right justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
			</Overload>
		</KeyWord>
		<KeyWord name="rmdir" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="rollback" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="round" func="yes">
			<Overload retVal="" descr="round(number[, ndigits]) -&gt; floating point number&#10;&#10;Round a number to a given precision in decimal digits (default 0 digits).&#10;This always returns a floating point number.  Precision may be negative.">
			</Overload>
		</KeyWord>
		<KeyWord name="row_seek" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="row_tell" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.result">
			</Overload>
		</KeyWord>
		<KeyWord name="rpartition" func="yes">
			<Overload retVal="" descr="B.rpartition(sep) -&gt; (head, sep, tail)&#10;&#10;Searches for the separator sep in B, starting at the end of B,&#10;and returns the part before it, the separator itself, and the&#10;part after it.  If the separator is not found, returns two empty&#10;bytearray objects and B.">
			</Overload>
		</KeyWord>
		<KeyWord name="rsplit" func="yes">
			<Overload retVal="" descr="S.rsplit([sep [,maxsplit]]) -&gt; list of strings&#10;&#10;Return a list of the words in the string S, using sep as the&#10;delimiter string, starting at the end of the string and working&#10;to the front.  If maxsplit is given, at most maxsplit splits are&#10;done. If sep is not specified or is None, any whitespace string&#10;is a separator.">
			</Overload>
		</KeyWord>
		<KeyWord name="rstrip" func="yes">
			<Overload retVal="" descr="S.rstrip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with trailing whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="saferepr" func="yes">
			<Overload retVal="" descr="Function of pprint">
			</Overload>
		</KeyWord>
		<KeyWord name="save" func="yes">
			<Overload retVal="" descr="Function of openpyxl.Workbook">
			</Overload>
		</KeyWord>
		<KeyWord name="seek" func="yes">
			<Overload retVal="" descr="seek(offset[, whence]) -&gt; None.  Move to new file position.&#10;&#10;Argument offset is a byte count.  Optional argument whence defaults to&#10;0 (offset from start of file, offset should be &gt;= 0); other values are 1&#10;(move relative to current position, positive or negative), and 2 (move&#10;relative to end of file, usually negative, although many platforms allow&#10;seeking beyond the end of a file).  If the file is opened in text mode,&#10;only offsets returned by tell() are legal.  Use of other offsets causes&#10;undefined behavior.&#10;Note that not all file objects are seekable.">
			</Overload>
		</KeyWord>
		<KeyWord name="select_db" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="server_end" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="server_init" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="set" func="yes">
			<Overload retVal="" descr="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object&#10;&#10;Build an unordered collection of unique elements.">
			</Overload>
		</KeyWord>
		<KeyWord name="set_character_set" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="set_server_option" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="setattr" func="yes">
			<Overload retVal="" descr="setattr(object, name, value)&#10;&#10;Set a named attribute on an object; setattr(x, 'y', v) is equivalent to&#10;``x.y = v''.">
			</Overload>
		</KeyWord>
		<KeyWord name="setcheckinterval" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setdefault" func="yes">
			<Overload retVal="" descr="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D">
			</Overload>
		</KeyWord>
		<KeyWord name="setprofile" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setrecursionlimit" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="setter" func="yes">
			<Overload retVal="" descr="Descriptor to change the setter on a property.">
			</Overload>
		</KeyWord>
		<KeyWord name="settrace" func="yes">
			<Overload retVal="" descr="Function of sys">
			</Overload>
		</KeyWord>
		<KeyWord name="sheet_by_index" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="sheet_by_name" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="sheet_loaded" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="sheet_names" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="sheets" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="shutdown" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="sleep" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="slice" func="yes">
			<Overload retVal="" descr="slice(stop)&#10;slice(start, stop[, step])&#10;&#10;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
			</Overload>
		</KeyWord>
		<KeyWord name="sort" func="yes">
			<Overload retVal="" descr="L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;&#10;cmp(x, y) -&gt; -1, 0, 1">
			</Overload>
		</KeyWord>
		<KeyWord name="sorted" func="yes">
			<Overload retVal="" descr="sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnl" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnle" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="spawnve" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="split" func="yes">
			<Overload retVal="" descr="B.split([sep[, maxsplit]]) -&gt; list of bytearray&#10;&#10;Return a list of the sections in B, using sep as the delimiter.&#10;If sep is not given, B is split on ASCII whitespace characters&#10;(space, tab, return, newline, formfeed, vertical tab).&#10;If maxsplit is given, at most maxsplit splits are done.">
			</Overload>
		</KeyWord>
		<KeyWord name="splitlines" func="yes">
			<Overload retVal="" descr="S.splitlines(keepends=False) -&gt; list of strings&#10;&#10;Return a list of the lines in S, breaking at line boundaries.&#10;Line breaks are not included in the resulting list unless keepends&#10;is given and true.">
			</Overload>
		</KeyWord>
		<KeyWord name="sqlstate" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="startfile" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="startswith" func="yes">
			<Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
			</Overload>
		</KeyWord>
		<KeyWord name="stat" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="stat_float_times" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="staticmethod" func="yes">
			<Overload retVal="" descr="staticmethod(function) -&gt; method&#10;&#10;Convert a function to be a static method.&#10;&#10;A static method does not receive an implicit first argument.&#10;To declare a static method, use this idiom:&#10;&#10;     class C:&#10;     def f(arg1, arg2, ...): ...&#10;     f = staticmethod(f)&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;&#10;Static methods in Python are similar to those found in Java or C++.&#10;For a more advanced concept, see the classmethod builtin.">
			</Overload>
		</KeyWord>
		<KeyWord name="store_result" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="str" func="yes">
			<Overload retVal="" descr="str(object='') -&gt; string&#10;&#10;Return a nice string representation of the object.&#10;If the argument is a string, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="strerror" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="strftime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="string_literal" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="strip" func="yes">
			<Overload retVal="" descr="S.strip([chars]) -&gt; string or unicode&#10;&#10;Return a copy of the string S with leading and trailing&#10;whitespace removed.&#10;If chars is given and not None, remove characters in chars instead.&#10;If chars is unicode, S will be converted to unicode before stripping">
			</Overload>
		</KeyWord>
		<KeyWord name="strptime" func="yes">
			<Overload retVal="" descr="Function of time">
			</Overload>
		</KeyWord>
		<KeyWord name="sum" func="yes">
			<Overload retVal="" descr="sum(sequence[, start]) -&gt; value&#10;&#10;Return the sum of a sequence of numbers (NOT strings) plus the value&#10;of parameter 'start' (which defaults to 0).  When the sequence is&#10;empty, return start.">
			</Overload>
		</KeyWord>
		<KeyWord name="super" func="yes">
			<Overload retVal="" descr="super(type, obj) -&gt; bound super object; requires isinstance(obj, type)&#10;super(type) -&gt; unbound super object&#10;super(type, type2) -&gt; bound super object; requires issubclass(type2, type)&#10;Typical use to call a cooperative superclass method:&#10;class C(B):&#10;    def meth(self, arg):&#10;        super(C, self).meth(arg)">
			</Overload>
		</KeyWord>
		<KeyWord name="swapcase" func="yes">
			<Overload retVal="" descr="S.swapcase() -&gt; string&#10;&#10;Return a copy of the string S with uppercase characters&#10;converted to lowercase and vice versa.">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference" func="yes">
			<Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#10;&#10;(i.e. all elements that are in exactly one of the sets.)">
			</Overload>
		</KeyWord>
		<KeyWord name="symmetric_difference_update" func="yes">
			<Overload retVal="" descr="Update a set with the symmetric difference of itself and another.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys" func="yes">
			<Overload retVal="" descr="This module provides access to some objects used or maintained by the&#10;interpreter and to functions that interact strongly with the interpreter.&#10;&#10;Dynamic objects:&#10;&#10;argv -- command line arguments; argv[0] is the script pathname if known&#10;path -- module search path; path[0] is the script directory, else ''&#10;modules -- dictionary of loaded modules&#10;&#10;displayhook -- called to show results in an interactive session&#10;excepthook -- called to handle any uncaught exception other than SystemExit&#10;  To customize printing in an interactive session or to install a custom&#10;  top-level exception handler, assign other functions to replace these.&#10;&#10;exitfunc -- if sys.exitfunc exists, this routine is called when Python exits&#10;  Assigning to sys.exitfunc is deprecated; use the atexit module instead.&#10;&#10;stdin -- standard input file object; used by raw_input() and input()&#10;stdout -- standard output file object; used by the print statement&#10;stderr -- standard error object; used for error messages&#10;  By assigning other file objects (or objects that behave like files)&#10;  to these, it is possible to redirect all of the interpreter's I/O.&#10;&#10;last_type -- type of last uncaught exception&#10;last_value -- value of last uncaught exception&#10;last_traceback -- traceback of last uncaught exception&#10;  These three are only available in an interactive session after a&#10;  traceback has been printed.&#10;&#10;exc_type -- type of exception currently being handled&#10;exc_value -- value of exception currently being handled&#10;exc_traceback -- traceback of exception currently being handled&#10;  The function exc_info() should be used instead of these three,&#10;  because it is thread-safe.&#10;&#10;Static objects:&#10;&#10;float_info -- a dict with information about the float inplementation.&#10;long_info -- a struct sequence with information about the long implementation.&#10;maxint -- the largest supported integer (the smallest is -maxint-1)&#10;maxsize -- the largest supported length of containers.&#10;maxunicode -- the largest supported character&#10;builtin_module_names -- tuple of module names built into this interpreter&#10;version -- the version of this interpreter as a string&#10;version_info -- version information as a named tuple&#10;hexversion -- version information encoded as a single integer&#10;copyright -- copyright notice pertaining to this interpreter&#10;platform -- platform identifier&#10;executable -- absolute path of the executable binary of the Python interpreter&#10;prefix -- prefix used to find the Python library&#10;exec_prefix -- prefix used to find the machine-specific Python library&#10;float_repr_style -- string indicating the style of repr() output for floats&#10;dllhandle -- [Windows only] integer handle of the Python DLL&#10;winver -- [Windows only] version number of the Python DLL&#10;__stdin__ -- the original stdin; don't touch!&#10;__stdout__ -- the original stdout; don't touch!&#10;__stderr__ -- the original stderr; don't touch!&#10;__displayhook__ -- the original displayhook; don't touch!&#10;__excepthook__ -- the original excepthook; don't touch!&#10;&#10;Functions:&#10;&#10;displayhook() -- print an object to the screen, and save it in __builtin__._&#10;excepthook() -- print an exception and its traceback to sys.stderr&#10;exc_info() -- return thread-safe information about the current exception&#10;exc_clear() -- clear the exception state for the current thread&#10;exit() -- exit the interpreter by raising SystemExit&#10;getdlopenflags() -- returns flags to be used for dlopen() calls&#10;getprofile() -- get the global profiling function&#10;getrefcount() -- return the reference count for an object (plus one :-)&#10;getrecursionlimit() -- return the max recursion depth for the interpreter&#10;getsizeof() -- return the size of an object in bytes&#10;gettrace() -- get the global debug tracing function&#10;setcheckinterval() -- control how often the interpreter checks for events&#10;setdlopenflags() -- set the flags to be used for dlopen() calls&#10;setprofile() -- set the global profiling function&#10;setrecursionlimit() -- set the max recursion depth for the interpreter&#10;settrace() -- set the global debug tracing function">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.api_version" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.argv" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.builtin_module_names" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.byteorder" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.call_tracing" func="yes">
			<Overload retVal="" descr="call_tracing(func, args) -&gt; object&#10;&#10;Call func(*args), while tracing is enabled.  The tracing state is&#10;saved, and restored afterwards.  This is intended to be called from&#10;a debugger from a checkpoint, to recursively debug some other code.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.callstats" func="yes">
			<Overload retVal="" descr="callstats() -&gt; tuple of integers&#10;&#10;Return a tuple of function call statistics, if CALL_PROFILE was defined&#10;when Python was built.  Otherwise, return None.&#10;&#10;When enabled, this function returns detailed, implementation-specific&#10;details about the number of function calls executed. The return value is&#10;a 11-tuple where the entries in the tuple are counts of:&#10;0. all function calls&#10;1. calls to PyFunction_Type objects&#10;2. PyFunction calls that do not create an argument tuple&#10;3. PyFunction calls that do not create an argument tuple&#10;   and bypass PyEval_EvalCodeEx()&#10;4. PyMethod calls&#10;5. PyMethod calls on bound methods&#10;6. PyType calls&#10;7. PyCFunction calls&#10;8. generator calls&#10;9. All other calls&#10;10. Number of stack pops performed by call_function()">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.copyright" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.displayhook" func="yes">
			<Overload retVal="" descr="displayhook(object) -&gt; None&#10;&#10;Print an object to sys.stdout and also save it in __builtin__._">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.dllhandle" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_clear" func="yes">
			<Overload retVal="" descr="exc_clear() -&gt; None&#10;&#10;Clear global information on the current exception.  Subsequent calls to&#10;exc_info() will return (None,None,None) until another exception is raised&#10;in the current thread or the execution stack returns to a frame where&#10;another exception is being handled.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_info" func="yes">
			<Overload retVal="" descr="exc_info() -&gt; (type, value, traceback)&#10;&#10;Return information about the most recent exception caught by an except&#10;clause in the current stack frame or in an older stack frame.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type" func="yes">
			<Overload retVal="" descr="Inappropriate argument type.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exc_type.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.excepthook" func="yes">
			<Overload retVal="" descr="excepthook(exctype, value, traceback) -&gt; None&#10;&#10;Handle an exception by displaying it with a traceback on sys.stderr.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exec_prefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.executable" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exit" func="yes">
			<Overload retVal="" descr="exit([status])&#10;&#10;Exit the interpreter by raising SystemExit(status).&#10;If the status is omitted or None, it defaults to zero (i.e., success).&#10;If the status is an integer, it will be used as the system exit status.&#10;If it is another kind of object, it will be printed and the system&#10;exit status will be one (i.e., failure).">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.exitfunc" func="yes">
			<Overload retVal="" descr="run any registered exit functions&#10;&#10;_exithandlers is traversed in reverse order so functions are executed&#10;last in, first out.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.flags" func="yes">
			<Overload retVal="" descr="(flags)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.float_info" func="yes">
			<Overload retVal="" descr="(float_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.float_repr_style" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getcheckinterval" func="yes">
			<Overload retVal="" descr="getcheckinterval() -&gt; current check interval; see setcheckinterval().">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getdefaultencoding" func="yes">
			<Overload retVal="" descr="getdefaultencoding() -&gt; string&#10;&#10;Return the current default string encoding used by the Unicode &#10;implementation.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getfilesystemencoding" func="yes">
			<Overload retVal="" descr="getfilesystemencoding() -&gt; string&#10;&#10;Return the encoding used to convert Unicode filenames in&#10;operating system filenames.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getprofile" func="yes">
			<Overload retVal="" descr="getprofile()&#10;&#10;Return the profiling function set with sys.setprofile.&#10;See the profiler chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getrecursionlimit" func="yes">
			<Overload retVal="" descr="getrecursionlimit()&#10;&#10;Return the current value of the recursion limit, the maximum depth&#10;of the Python interpreter stack.  This limit prevents infinite&#10;recursion from causing an overflow of the C stack and crashing Python.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getrefcount" func="yes">
			<Overload retVal="" descr="getrefcount(object) -&gt; integer&#10;&#10;Return the reference count of object.  The count returned is generally&#10;one higher than you might expect, because it includes the (temporary)&#10;reference as an argument to getrefcount().">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getsizeof" func="yes">
			<Overload retVal="" descr="getsizeof(object, default) -&gt; int&#10;&#10;Return the size of object in bytes.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.gettrace" func="yes">
			<Overload retVal="" descr="gettrace()&#10;&#10;Return the global debug tracing function set with sys.settrace.&#10;See the debugger chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.getwindowsversion" func="yes">
			<Overload retVal="" descr="getwindowsversion()&#10;&#10;Return information about the running version of Windows as a named tuple.&#10;The members are named: major, minor, build, platform, service_pack,&#10;service_pack_major, service_pack_minor, suite_mask, and product_type. For&#10;backward compatibility, only the first 5 items are available by indexing.&#10;All elements are numbers, except service_pack which is a string. Platform&#10;may be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,&#10;3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain&#10;controller, 3 for a server.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.hexversion" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.long_info" func="yes">
			<Overload retVal="" descr="(long_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxint" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxsize" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.maxunicode" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.modules" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path_hooks" func="yes">
			<Overload retVal="" descr="(list)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.path_importer_cache" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.platform" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.prefix" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setcheckinterval" func="yes">
			<Overload retVal="" descr="setcheckinterval(n)&#10;&#10;Tell the Python interpreter to check for asynchronous events every&#10;n instructions.  This also affects how often thread switches occur.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setprofile" func="yes">
			<Overload retVal="" descr="setprofile(function)&#10;&#10;Set the profiling function.  It will be called on each function call&#10;and return.  See the profiler chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.setrecursionlimit" func="yes">
			<Overload retVal="" descr="setrecursionlimit(n)&#10;&#10;Set the maximum depth of the Python interpreter stack to n.  This&#10;limit prevents infinite recursion from causing an overflow of the C&#10;stack and crashing Python.  The highest possible limit is platform-&#10;dependent.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.settrace" func="yes">
			<Overload retVal="" descr="settrace(function)&#10;&#10;Set the global debug tracing function.  It will be called on each&#10;function call.  See the debugger chapter in the library manual.">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stderr" func="yes">
			<Overload retVal="" descr="(file)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stdin" func="yes">
			<Overload retVal="" descr="(file)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.stdout" func="yes">
			<Overload retVal="" descr="(file)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.subversion" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.version" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.version_info" func="yes">
			<Overload retVal="" descr="(version_info)">
			</Overload>
		</KeyWord>
		<KeyWord name="sys.winver" func="yes">
			<Overload retVal="" descr="(str)">
			</Overload>
		</KeyWord>
		<KeyWord name="system" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="tell" func="yes">
			<Overload retVal="" descr="tell() -&gt; current file position, an integer (may be a long integer).">
			</Overload>
		</KeyWord>
		<KeyWord name="tempnam" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="test_DBAPISet_set_equality" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="test_DBAPISet_set_equality_membership" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="test_DBAPISet_set_inequality" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="test_DBAPISet_set_inequality_membership" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="thread_id" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="thread_safe" func="yes">
			<Overload retVal="" descr="Function of MySQLdb">
			</Overload>
		</KeyWord>
		<KeyWord name="time" func="yes">
			<Overload retVal="" descr="This module provides various functions to manipulate time values.&#10;&#10;There are two standard representations of time.  One is the number&#10;of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer&#10;or a floating point number (to represent fractions of seconds).&#10;The Epoch is system-defined; on Unix, it is generally January 1st, 1970.&#10;The actual value can be retrieved by calling gmtime(0).&#10;&#10;The other representation is a tuple of 9 integers giving local time.&#10;The tuple items are:&#10;  year (four digits, e.g. 1998)&#10;  month (1-12)&#10;  day (1-31)&#10;  hours (0-23)&#10;  minutes (0-59)&#10;  seconds (0-59)&#10;  weekday (0-6, Monday is 0)&#10;  Julian day (day in the year, 1-366)&#10;  DST (Daylight Savings Time) flag (-1, 0 or 1)&#10;If the DST flag is 0, the time is given in the regular time zone;&#10;if it is 1, the time is given in the DST time zone;&#10;if it is -1, mktime() should guess based on the date and time.&#10;&#10;Variables:&#10;&#10;timezone -- difference in seconds between UTC and local standard time&#10;altzone -- difference in  seconds between UTC and local DST time&#10;daylight -- whether local time should reflect DST&#10;tzname -- tuple of (standard time zone name, DST time zone name)&#10;&#10;Functions:&#10;&#10;time() -- return current time in seconds since the Epoch as a float&#10;clock() -- return CPU time since process start as a float&#10;sleep() -- delay for a number of seconds given as a float&#10;gmtime() -- convert seconds since Epoch to UTC tuple&#10;localtime() -- convert seconds since Epoch to local time tuple&#10;asctime() -- convert time tuple to string&#10;ctime() -- convert time in seconds to string&#10;mktime() -- convert local time tuple to seconds since Epoch&#10;strftime() -- convert time tuple to string according to format specification&#10;strptime() -- parse string to time tuple according to format specification&#10;tzset() -- change the local timezone">
			</Overload>
		</KeyWord>
		<KeyWord name="time.accept2dyear" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.altzone" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.asctime" func="yes">
			<Overload retVal="" descr="asctime([tuple]) -&gt; string&#10;&#10;Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.&#10;When the time tuple is not present, current time as returned by localtime()&#10;is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.clock" func="yes">
			<Overload retVal="" descr="clock() -&gt; floating point number&#10;&#10;Return the CPU time or real time since the start of the process or since&#10;the first call to clock().  This has as much precision as the system&#10;records.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.ctime" func="yes">
			<Overload retVal="" descr="ctime(seconds) -&gt; string&#10;&#10;Convert a time in seconds since the Epoch to a string in local time.&#10;This is equivalent to asctime(localtime(seconds)). When the time tuple is&#10;not present, current time as returned by localtime() is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.gmtime" func="yes">
			<Overload retVal="" descr="gmtime([seconds]) -&gt; (tm_year, tm_mon, tm_mday, tm_hour, tm_min,&#10;                       tm_sec, tm_wday, tm_yday, tm_isdst)&#10;&#10;Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.&#10;GMT).  When 'seconds' is not passed in, convert the current time instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.localtime" func="yes">
			<Overload retVal="" descr="localtime([seconds]) -&gt; (tm_year,tm_mon,tm_mday,tm_hour,tm_min,&#10;                          tm_sec,tm_wday,tm_yday,tm_isdst)&#10;&#10;Convert seconds since the Epoch to a time tuple expressing local time.&#10;When 'seconds' is not passed in, convert the current time instead.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.mktime" func="yes">
			<Overload retVal="" descr="mktime(tuple) -&gt; floating point number&#10;&#10;Convert a time tuple in local time to seconds since the Epoch.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.sleep" func="yes">
			<Overload retVal="" descr="sleep(seconds)&#10;&#10;Delay execution for a given number of seconds.  The argument may be&#10;a floating point number for subsecond precision.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.strftime" func="yes">
			<Overload retVal="" descr="strftime(format[, tuple]) -&gt; string&#10;&#10;Convert a time tuple to a string according to a format specification.&#10;See the library reference manual for formatting codes. When the time tuple&#10;is not present, current time as returned by localtime() is used.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.strptime" func="yes">
			<Overload retVal="" descr="strptime(string, format) -&gt; struct_time&#10;&#10;Parse a string to a time tuple according to a format specification.&#10;See the library reference manual for formatting codes (same as strftime()).">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time" func="yes">
			<Overload retVal="" descr="The time value as returned by gmtime(), localtime(), and strptime(), and&#10;accepted by asctime(), mktime() and strftime().  May be considered as a&#10;sequence of 9 integers.&#10;&#10;Note that several fields' values are not the same as those defined by&#10;the C language standard for struct tm.  For example, the value of the&#10;field tm_year is the actual year, not year - 1900.  See individual&#10;fields' descriptions for details.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.n_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.n_sequence_fields" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_hour" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_isdst" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_mday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_min" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_mon" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_sec" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_wday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_yday" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.struct_time.tm_year" func="yes">
			<Overload retVal="" descr="(member_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.time" func="yes">
			<Overload retVal="" descr="time() -&gt; floating point number&#10;&#10;Return the current time in seconds since the Epoch.&#10;Fractions of a second may be present if the system clock provides them.">
			</Overload>
		</KeyWord>
		<KeyWord name="time.timezone" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="time.tzname" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="times" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="timetuple" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="timetz" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="title" func="yes">
			<Overload retVal="" descr="S.title() -&gt; unicode&#10;&#10;Return a titlecased version of S, i.e. words start with title case&#10;characters, all remaining cased characters have lower case.">
			</Overload>
		</KeyWord>
		<KeyWord name="tmpfile" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="tmpnam" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="tobytes" />
		<KeyWord name="today" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Date">
			</Overload>
		</KeyWord>
		<KeyWord name="tolist" />
		<KeyWord name="toordinal" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="translate" func="yes">
			<Overload retVal="" descr="B.translate(table[, deletechars]) -&gt; bytearray&#10;&#10;Return a copy of B, where all characters occurring in the&#10;optional argument deletechars are removed, and the remaining&#10;characters have been mapped through the given translation&#10;table, which must be a bytes object of length 256.">
			</Overload>
		</KeyWord>
		<KeyWord name="truncate" func="yes">
			<Overload retVal="" descr="truncate([size]) -&gt; None.  Truncate the file to at most size bytes.&#10;&#10;Size defaults to the current file position, as returned by tell().">
			</Overload>
		</KeyWord>
		<KeyWord name="try" />
		<KeyWord name="tuple" func="yes">
			<Overload retVal="" descr="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items&#10;&#10;If the argument is a tuple, the return value is the same object.">
			</Overload>
		</KeyWord>
		<KeyWord name="type" func="yes">
			<Overload retVal="" descr="type(object) -&gt; the object's type&#10;type(name, bases, dict) -&gt; a new type">
			</Overload>
		</KeyWord>
		<KeyWord name="tzname" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Time">
			</Overload>
		</KeyWord>
		<KeyWord name="umask" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="unichr" func="yes">
			<Overload retVal="" descr="unichr(i) -&gt; Unicode character&#10;&#10;Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff.">
			</Overload>
		</KeyWord>
		<KeyWord name="unicode" func="yes">
			<Overload retVal="" descr="unicode(object='') -&gt; unicode object&#10;unicode(string[, encoding[, errors]]) -&gt; unicode object&#10;&#10;Create a new Unicode object from the given encoded string.&#10;encoding defaults to the current default string encoding.&#10;errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.">
			</Overload>
		</KeyWord>
		<KeyWord name="union" func="yes">
			<Overload retVal="" descr="Return the union of sets as a new set.&#10;&#10;(i.e. all elements that are in either set.)">
			</Overload>
		</KeyWord>
		<KeyWord name="unlink" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="unload_sheet" func="yes">
			<Overload retVal="" descr="Function of xlrd.Book">
			</Overload>
		</KeyWord>
		<KeyWord name="unsetenv" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="update" func="yes">
			<Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E present and has a .keys() method, does:     for k in E: D[k] = E[k]&#10;If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v&#10;In either case, this is followed by: for k in F: D[k] = F[k]">
			</Overload>
		</KeyWord>
		<KeyWord name="upper" func="yes">
			<Overload retVal="" descr="S.upper() -&gt; unicode&#10;&#10;Return a copy of S converted to uppercase.">
			</Overload>
		</KeyWord>
		<KeyWord name="urandom" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="use_result" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="utcfromtimestamp" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="utcnow" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="utcoffset" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="utctimetuple" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="utime" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="values" func="yes">
			<Overload retVal="" descr="D.values() -&gt; list of D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="vars" func="yes">
			<Overload retVal="" descr="vars([object]) -&gt; dictionary&#10;&#10;Without arguments, equivalent to locals().&#10;With an argument, equivalent to object.__dict__.">
			</Overload>
		</KeyWord>
		<KeyWord name="viewitems" func="yes">
			<Overload retVal="" descr="D.viewitems() -&gt; a set-like object providing a view on D's items">
			</Overload>
		</KeyWord>
		<KeyWord name="viewkeys" func="yes">
			<Overload retVal="" descr="D.viewkeys() -&gt; a set-like object providing a view on D's keys">
			</Overload>
		</KeyWord>
		<KeyWord name="viewvalues" func="yes">
			<Overload retVal="" descr="D.viewvalues() -&gt; an object providing a view on D's values">
			</Overload>
		</KeyWord>
		<KeyWord name="waitpid" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="walk" func="yes">
			<Overload retVal="" descr="Function of os">
			</Overload>
		</KeyWord>
		<KeyWord name="warning_count" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.connection">
			</Overload>
		</KeyWord>
		<KeyWord name="weekday" func="yes">
			<Overload retVal="" descr="Function of MySQLdb.Timestamp">
			</Overload>
		</KeyWord>
		<KeyWord name="while" />
		<KeyWord name="with" />
		<KeyWord name="write" func="yes">
			<Overload retVal="" descr="write(str) -&gt; None.  Write string str to file.&#10;&#10;Note that due to buffering, flush() or close() may be needed before&#10;the file on disk reflects the data written.">
			</Overload>
		</KeyWord>
		<KeyWord name="writelines" func="yes">
			<Overload retVal="" descr="writelines(sequence_of_strings) -&gt; None.  Write the strings to the file.&#10;&#10;Note that newlines are not added.  The sequence can be any iterable object&#10;producing strings. This is equivalent to calling write() for each string.">
			</Overload>
		</KeyWord>
		<KeyWord name="xldate_as_tuple" func="yes">
			<Overload retVal="" descr="Function of xlrd">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd" />
		<KeyWord name="xlrd.Book" />
		<KeyWord name="xlrd.Book.biff2_8_load" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[filename=None" />
				<Param name="[file_contents=None" />
				<Param name="[logfile=<open file '<stdout>', mode 'w' at 0x01C3D078>" />
				<Param name="[verbosity=0" />
				<Param name="[use_mmap=1" />
				<Param name="[encoding_override=None" />
				<Param name="[formatting_info=False" />
				<Param name="[on_demand=False" />
				<Param name="[ragged_rows=False]]]]]]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.countries" func="yes">
			<Overload retVal="" descr="(tuple)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.derive_encoding" />
		<KeyWord name="xlrd.Book.dump" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="[f=None" />
				<Param name="[header=None" />
				<Param name="[footer=None" />
				<Param name="[indent=0]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.fake_globals_get_sheet" />
		<KeyWord name="xlrd.Book.get2bytes" />
		<KeyWord name="xlrd.Book.get_record_parts" />
		<KeyWord name="xlrd.Book.get_record_parts_conditional" />
		<KeyWord name="xlrd.Book.get_sheet" func="yes">
			<Overload retVal="" descr=>
				<Param name="self" />
				<Param name="sh_number" />
				<Param name="[update_pos=True]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.get_sheets" />
		<KeyWord name="xlrd.Book.getbof" />
		<KeyWord name="xlrd.Book.handle_boundsheet" />
		<KeyWord name="xlrd.Book.handle_builtinfmtcount" />
		<KeyWord name="xlrd.Book.handle_codepage" />
		<KeyWord name="xlrd.Book.handle_country" />
		<KeyWord name="xlrd.Book.handle_datemode" />
		<KeyWord name="xlrd.Book.handle_externname" />
		<KeyWord name="xlrd.Book.handle_externsheet" />
		<KeyWord name="xlrd.Book.handle_filepass" />
		<KeyWord name="xlrd.Book.handle_name" />
		<KeyWord name="xlrd.Book.handle_obj" />
		<KeyWord name="xlrd.Book.handle_sheethdr" />
		<KeyWord name="xlrd.Book.handle_sheetsoffset" />
		<KeyWord name="xlrd.Book.handle_sst" />
		<KeyWord name="xlrd.Book.handle_supbook" />
		<KeyWord name="xlrd.Book.handle_writeaccess" />
		<KeyWord name="xlrd.Book.initialise_format_info" />
		<KeyWord name="xlrd.Book.load_time_stage_1" func="yes">
			<Overload retVal="" descr="(float)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.load_time_stage_2" func="yes">
			<Overload retVal="" descr="(float)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.Book.names_epilogue" />
		<KeyWord name="xlrd.Book.parse_globals" />
		<KeyWord name="xlrd.Book.read" />
		<KeyWord name="xlrd.Book.release_resources" />
		<KeyWord name="xlrd.Book.sheet_by_index" />
		<KeyWord name="xlrd.Book.sheet_by_name" />
		<KeyWord name="xlrd.Book.sheet_loaded" />
		<KeyWord name="xlrd.Book.sheet_names" />
		<KeyWord name="xlrd.Book.sheets" />
		<KeyWord name="xlrd.Book.unload_sheet" />
		<KeyWord name="xlrd.FMLA_TYPE_ARRAY" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.FMLA_TYPE_CELL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.FMLA_TYPE_COND_FMT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.FMLA_TYPE_DATA_VAL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.FMLA_TYPE_NAME" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.FMLA_TYPE_SHARED" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.MMAP_AVAILABLE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.USE_MMAP" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XLDateError" />
		<KeyWord name="xlrd.XLDateError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XLDateError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XLRDError" />
		<KeyWord name="xlrd.XLRDError.args" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XLRDError.message" func="yes">
			<Overload retVal="" descr="(getset_descriptor)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_BLANK" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_BOOLEAN" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_DATE" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_ERROR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_NUMBER" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.XL_CELL_TEXT" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.biff_text_from_num" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.cellname" func="yes">
			<Overload retVal="" descr="(5, 7) =&gt; 'H6'">
				<Param name="rowx" />
				<Param name="colx" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.cellnameabs" func="yes">
			<Overload retVal="" descr="(5, 7) =&gt; '$H$6' or 'R8C6'">
				<Param name="rowx" />
				<Param name="colx" />
				<Param name="[r1c1=0]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.colname" func="yes">
			<Overload retVal="" descr=>
				<Param name="colx" />
				<Param name="[_A2Z=ABCDEFGHIJKLMNOPQRSTUVWXYZ]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.count_records" func="yes">
			<Overload retVal="" descr=>
				<Param name="filename" />
				<Param name="[outfile=<open file '<stdout>', mode 'w' at 0x01C3D078>]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.decompile_formula" func="yes">
			<Overload retVal="" descr=>
				<Param name="bk" />
				<Param name="fmla" />
				<Param name="fmlalen" />
				<Param name="[fmlatype=None" />
				<Param name="[browx=None" />
				<Param name="[bcolx=None" />
				<Param name="[blah=0" />
				<Param name="[level=0" />
				<Param name="[r1c1=0]]]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.dump" func="yes">
			<Overload retVal="" descr=>
				<Param name="filename" />
				<Param name="[outfile=<open file '<stdout>', mode 'w' at 0x01C3D078>" />
				<Param name="[unnumbered=False]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.dump_formula" func="yes">
			<Overload retVal="" descr=>
				<Param name="bk" />
				<Param name="data" />
				<Param name="fmlalen" />
				<Param name="bv" />
				<Param name="reldelta" />
				<Param name="[blah=0" />
				<Param name="[isname=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.empty_cell" func="yes">
			<Overload retVal="" descr="(Cell)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.error_text_from_code" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.evaluate_name_formula" func="yes">
			<Overload retVal="" descr=>
				<Param name="bk" />
				<Param name="nobj" />
				<Param name="namex" />
				<Param name="[blah=0" />
				<Param name="[level=0]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oBOOL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oERR" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oNUM" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oREF" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oREL" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.oSTRG" func="yes">
			<Overload retVal="" descr="(int)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.okind_dict" func="yes">
			<Overload retVal="" descr="(dict)">
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.open_workbook" func="yes">
			<Overload retVal="" descr=>
				<Param name="[filename=None" />
				<Param name="[logfile=<open file '<stdout>', mode 'w' at 0x01C3D078>" />
				<Param name="[verbosity=0" />
				<Param name="[use_mmap=1" />
				<Param name="[file_contents=None" />
				<Param name="[encoding_override=None" />
				<Param name="[formatting_info=False" />
				<Param name="[on_demand=False" />
				<Param name="[ragged_rows=False]]]]]]]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.rangename3d" func="yes">
			<Overload retVal="" descr="Ref3D(1, 4, 5, 20, 7, 10) =&gt; 'Sheet2:Sheet3!$H$6:$J$20'&#10;(assuming Excel's default sheetnames)">
				<Param name="book" />
				<Param name="ref3d" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.rangename3drel" func="yes">
			<Overload retVal="" descr=>
				<Param name="book" />
				<Param name="ref3d" />
				<Param name="[browx=None" />
				<Param name="[bcolx=None" />
				<Param name="[r1c1=0]]]" />
			</Overload>
		</KeyWord>
		<KeyWord name="xlrd.xldate_as_tuple" />
		<KeyWord name="xrange" func="yes">
			<Overload retVal="" descr="xrange(stop) -&gt; xrange object&#10;xrange(start, stop[, step]) -&gt; xrange object&#10;&#10;Like range(), but instead of returning a list, returns an object that&#10;generates the numbers in the range on demand.  For looping, this is &#10;slightly faster than range() and more memory efficient.">
			</Overload>
		</KeyWord>
		<KeyWord name="xreadlines" func="yes">
			<Overload retVal="" descr="xreadlines() -&gt; returns self.&#10;&#10;For backward compatibility. File objects now include the performance&#10;optimizations previously implemented in the xreadlines module.">
			</Overload>
		</KeyWord>
		<KeyWord name="yield" />
		<KeyWord name="zfill" func="yes">
			<Overload retVal="" descr="B.zfill(width) -&gt; copy of B&#10;&#10;Pad a numeric string B with zeros on the left, to fill a field&#10;of the specified width.  B is never truncated.">
			</Overload>
		</KeyWord>
		<KeyWord name="zip" func="yes">
			<Overload retVal="" descr="zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]&#10;&#10;Return a list of tuples, where each tuple contains the i-th element&#10;from each of the argument sequences.  The returned list is truncated&#10;in length to the length of the shortest argument sequence.">
			</Overload>
		</KeyWord>
	</AutoComplete>
</NotepadPlus>
